ðŸ“¦
404 /index.js.map
287 /index.js
102640 /node_modules/frida-il2cpp-bridge/dist/index.js.map
132283 /node_modules/frida-il2cpp-bridge/dist/index.js
â†» frida-il2cpp-bridge
âœ„
{"version":3,"file":"index.js","sourceRoot":"/home/misman/project/modding/ModEnv/FridaBridge/","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,CAAC;AAE7B,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IAChB,OAAO,CAAC,GAAG,CAAC,iBAAiB,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;IACpD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAE7B,MAAM,CAAC,IAAI,EAAE,CAAC;IAEd,iBAAiB;IACjB,sDAAsD;IACtD,aAAa;IACb,iBAAiB;AACrB,CAAC,CAAC,CAAC"}
âœ„
import "frida-il2cpp-bridge";
Il2Cpp.perform(() => {
    console.log(`Unity Version ${Il2Cpp.unityVersion}`);
    const domain = Il2Cpp.domain;
    Il2Cpp.dump();
    // Il2Cpp.trace()
    //     .assemblies(domain.assembly("Assembly-CSharp"))
    //     .and()
    //     .attach();
});
âœ„
{"version":3,"file":"index.js","sourceRoot":"./","sources":["utils/console.ts","utils/getter.ts","utils/lazy.ts","utils/native-struct.ts","utils/native-wait.ts","utils/offset-of.ts","utils/read-native-iterator.ts","utils/read-native-list.ts","utils/recycle.ts","utils/unity-version.ts","il2cpp/api.ts","il2cpp/application.ts","il2cpp/dump.ts","il2cpp/exception-listener.ts","il2cpp/filters.ts","il2cpp/gc.ts","il2cpp/memory.ts","il2cpp/module.ts","il2cpp/perform.ts","il2cpp/tracer.ts","il2cpp/structs/array.ts","il2cpp/structs/assembly.ts","il2cpp/structs/class.ts","il2cpp/structs/delegate.ts","il2cpp/structs/domain.ts","il2cpp/structs/field.ts","il2cpp/structs/gc-handle.ts","il2cpp/structs/image.ts","il2cpp/structs/memory-snapshot.ts","il2cpp/structs/method.ts","il2cpp/structs/object.ts","il2cpp/structs/parameter.ts","il2cpp/structs/pointer.ts","il2cpp/structs/reference.ts","il2cpp/structs/string.ts","il2cpp/structs/thread.ts","il2cpp/structs/type.ts","il2cpp/structs/value-type.ts","index.ts","utils/decorate.ts"],"names":[],"mappings":"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"}
âœ„
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/** @internal */
function raise(message) {
    const error = new Error(`\x1B[0m${message}`);
    error.name = `\x1B[0m\x1B[38;5;9mil2cpp\x1B[0m`;
    error.stack = error.stack
        ?.replace("Error", error.name)
        ?.replace(/\n    at (.+) \((.+):(.+)\)/, "\x1b[3m\x1b[2m")
        ?.concat("\x1B[0m");
    throw error;
}
/** @internal */
function warn(message) {
    globalThis.console.log(`\x1B[38;5;11mil2cpp\x1B[0m: ${message}`);
}
/** @internal */
function ok(message) {
    globalThis.console.log(`\x1B[38;5;10mil2cpp\x1B[0m: ${message}`);
}
/** @internal */
function inform(message) {
    globalThis.console.log(`\x1B[38;5;12mil2cpp\x1B[0m: ${message}`);
}
/** @internal */
function getter(target, key, get, decorator) {
    globalThis.Object.defineProperty(target, key, decorator?.(target, key, { get, configurable: true }) ?? { get });
}
/** @internal */
function lazy(_, propertyKey, descriptor) {
    const getter = descriptor.get;
    if (!getter) {
        throw new Error("@lazy can only be applied to getter accessors");
    }
    descriptor.get = function () {
        const value = getter.call(this);
        Object.defineProperty(this, propertyKey, {
            value,
            configurable: descriptor.configurable,
            enumerable: descriptor.enumerable,
            writable: false
        });
        return value;
    };
    return descriptor;
}
/** Scaffold class. */
class NativeStruct {
    handle;
    constructor(handleOrWrapper) {
        if (handleOrWrapper instanceof NativePointer) {
            this.handle = handleOrWrapper;
        }
        else {
            this.handle = handleOrWrapper.handle;
        }
    }
    equals(other) {
        return this.handle.equals(other.handle);
    }
    isNull() {
        return this.handle.isNull();
    }
    asNullable() {
        return this.isNull() ? null : this;
    }
}
/** @internal */
class Target {
    stringEncoding;
    address;
    constructor(responsible, name, stringEncoding) {
        this.stringEncoding = stringEncoding;
        this.address = Module.findExportByName(responsible, name) ?? NULL;
    }
    static get targets() {
        function info() {
            switch (Process.platform) {
                case "linux":
                    try {
                        if (UnityVersion.gte(Java.androidVersion, "12")) {
                            return [null, ["__loader_dlopen", "utf8"]];
                        }
                        else {
                            return ["libdl.so", ["dlopen", "utf8"], ["android_dlopen_ext", "utf8"]];
                        }
                    }
                    catch (e) {
                        return [null, ["dlopen", "utf8"]];
                    }
                case "darwin":
                    return ["libdyld.dylib", ["dlopen", "utf8"]];
                case "windows":
                    const ll = "LoadLibrary";
                    return ["kernel32.dll", [`${ll}W`, "utf16"], [`${ll}ExW`, "utf16"], [`${ll}A`, "ansi"], [`${ll}ExA`, "ansi"]];
            }
        }
        const [responsible, ...targets] = info();
        return targets.map(([name, encoding]) => new Target(responsible, name, encoding)).filter(_ => !_.address.isNull());
    }
    readString(pointer) {
        switch (this.stringEncoding) {
            case "utf8":
                return pointer.readUtf8String();
            case "utf16":
                return pointer.readUtf16String();
            case "ansi":
                return pointer.readAnsiString();
        }
    }
}
/** @internal */
function forModule(...moduleNames) {
    return new Promise(resolve => {
        for (const moduleName of moduleNames) {
            const module = Process.findModuleByName(moduleName);
            if (module != null) {
                resolve(moduleName);
                return;
            }
        }
        const interceptors = Target.targets.map(target => Interceptor.attach(target.address, {
            onEnter(args) {
                this.modulePath = target.readString(args[0]) ?? "";
            },
            onLeave(returnValue) {
                if (returnValue.isNull())
                    return;
                for (const moduleName of moduleNames) {
                    if (!this.modulePath.endsWith(moduleName))
                        continue;
                    setImmediate(() => interceptors.forEach(_ => _.detach()));
                    resolve(moduleName);
                }
            }
        }));
    });
}
NativePointer.prototype.offsetOf = function (condition, depth) {
    depth ??= 512;
    for (let i = 0; i < depth; i++) {
        if (condition(this.add(i))) {
            return i;
        }
    }
    return null;
};
/** @internal */
function readNativeIterator(block) {
    const array = [];
    const iterator = Memory.alloc(Process.pointerSize);
    let handle = block(iterator);
    while (!handle.isNull()) {
        array.push(handle);
        handle = block(iterator);
    }
    return array;
}
/** @internal */
function readNativeList(block) {
    const lengthPointer = Memory.alloc(Process.pointerSize);
    const startPointer = block(lengthPointer);
    if (startPointer.isNull()) {
        return [];
    }
    const array = new Array(lengthPointer.readInt());
    for (let i = 0; i < array.length; i++) {
        array[i] = startPointer.add(i * Process.pointerSize).readPointer();
    }
    return array;
}
/** @internal */
function recycle(Class) {
    return new Proxy(Class, {
        cache: new Map(),
        construct(Target, argArray) {
            const handle = argArray[0].toUInt32();
            if (!this.cache.has(handle)) {
                this.cache.set(handle, new Target(argArray[0]));
            }
            return this.cache.get(handle);
        }
    });
}
/** @internal */
var UnityVersion;
(function (UnityVersion) {
    const pattern = /(20\d{2}|\d)\.(\d)\.(\d{1,2})(?:[abcfp]|rc){0,2}\d?/;
    function find(string) {
        return string?.match(pattern)?.[0];
    }
    UnityVersion.find = find;
    function gte(a, b) {
        return compare(a, b) >= 0;
    }
    UnityVersion.gte = gte;
    function lt(a, b) {
        return compare(a, b) < 0;
    }
    UnityVersion.lt = lt;
    function compare(a, b) {
        const aMatches = a.match(pattern);
        const bMatches = b.match(pattern);
        for (let i = 1; i <= 3; i++) {
            const a = Number(aMatches?.[i] ?? -1);
            const b = Number(bMatches?.[i] ?? -1);
            if (a > b)
                return 1;
            else if (a < b)
                return -1;
        }
        return 0;
    }
})(UnityVersion || (UnityVersion = {}));
var Il2Cpp;
(function (Il2Cpp) {
    Il2Cpp.api = {
        get alloc() {
            return r("il2cpp_alloc", "pointer", ["size_t"]);
        },
        get arrayGetLength() {
            return r("il2cpp_array_length", "uint32", ["pointer"]);
        },
        get arrayNew() {
            return r("il2cpp_array_new", "pointer", ["pointer", "uint32"]);
        },
        get assemblyGetImage() {
            return r("il2cpp_assembly_get_image", "pointer", ["pointer"]);
        },
        get classForEach() {
            return r("il2cpp_class_for_each", "void", ["pointer", "pointer"]);
        },
        get classFromName() {
            return r("il2cpp_class_from_name", "pointer", ["pointer", "pointer", "pointer"]);
        },
        get classFromObject() {
            return r("il2cpp_class_from_system_type", "pointer", ["pointer"]);
        },
        get classGetArrayClass() {
            return r("il2cpp_array_class_get", "pointer", ["pointer", "uint32"]);
        },
        get classGetArrayElementSize() {
            return r("il2cpp_class_array_element_size", "int", ["pointer"]);
        },
        get classGetAssemblyName() {
            return r("il2cpp_class_get_assemblyname", "pointer", ["pointer"]);
        },
        get classGetBaseType() {
            return r("il2cpp_class_enum_basetype", "pointer", ["pointer"]);
        },
        get classGetDeclaringType() {
            return r("il2cpp_class_get_declaring_type", "pointer", ["pointer"]);
        },
        get classGetElementClass() {
            return r("il2cpp_class_get_element_class", "pointer", ["pointer"]);
        },
        get classGetFieldFromName() {
            return r("il2cpp_class_get_field_from_name", "pointer", ["pointer", "pointer"]);
        },
        get classGetFields() {
            return r("il2cpp_class_get_fields", "pointer", ["pointer", "pointer"]);
        },
        get classGetFlags() {
            return r("il2cpp_class_get_flags", "int", ["pointer"]);
        },
        get classGetImage() {
            return r("il2cpp_class_get_image", "pointer", ["pointer"]);
        },
        get classGetInstanceSize() {
            return r("il2cpp_class_instance_size", "int32", ["pointer"]);
        },
        get classGetInterfaces() {
            return r("il2cpp_class_get_interfaces", "pointer", ["pointer", "pointer"]);
        },
        get classGetMethodFromName() {
            return r("il2cpp_class_get_method_from_name", "pointer", ["pointer", "pointer", "int"]);
        },
        get classGetMethods() {
            return r("il2cpp_class_get_methods", "pointer", ["pointer", "pointer"]);
        },
        get classGetName() {
            return r("il2cpp_class_get_name", "pointer", ["pointer"]);
        },
        get classGetNamespace() {
            return r("il2cpp_class_get_namespace", "pointer", ["pointer"]);
        },
        get classGetNestedClasses() {
            return r("il2cpp_class_get_nested_types", "pointer", ["pointer", "pointer"]);
        },
        get classGetParent() {
            return r("il2cpp_class_get_parent", "pointer", ["pointer"]);
        },
        get classGetStaticFieldData() {
            return r("il2cpp_class_get_static_field_data", "pointer", ["pointer"]);
        },
        get classGetValueTypeSize() {
            return r("il2cpp_class_value_size", "int32", ["pointer", "pointer"]);
        },
        get classGetType() {
            return r("il2cpp_class_get_type", "pointer", ["pointer"]);
        },
        get classHasReferences() {
            return r("il2cpp_class_has_references", "bool", ["pointer"]);
        },
        get classInitialize() {
            return r("il2cpp_runtime_class_init", "void", ["pointer"]);
        },
        get classIsAbstract() {
            return r("il2cpp_class_is_abstract", "bool", ["pointer"]);
        },
        get classIsAssignableFrom() {
            return r("il2cpp_class_is_assignable_from", "bool", ["pointer", "pointer"]);
        },
        get classIsBlittable() {
            return r("il2cpp_class_is_blittable", "bool", ["pointer"]);
        },
        get classIsEnum() {
            return r("il2cpp_class_is_enum", "bool", ["pointer"]);
        },
        get classIsGeneric() {
            return r("il2cpp_class_is_generic", "bool", ["pointer"]);
        },
        get classIsInflated() {
            return r("il2cpp_class_is_inflated", "bool", ["pointer"]);
        },
        get classIsInterface() {
            return r("il2cpp_class_is_interface", "bool", ["pointer"]);
        },
        get classIsSubclassOf() {
            return r("il2cpp_class_is_subclass_of", "bool", ["pointer", "pointer", "bool"]);
        },
        get classIsValueType() {
            return r("il2cpp_class_is_valuetype", "bool", ["pointer"]);
        },
        get domainGetAssemblyFromName() {
            return r("il2cpp_domain_assembly_open", "pointer", ["pointer", "pointer"]);
        },
        get domainGet() {
            return r("il2cpp_domain_get", "pointer", []);
        },
        get domainGetAssemblies() {
            return r("il2cpp_domain_get_assemblies", "pointer", ["pointer", "pointer"]);
        },
        get fieldGetClass() {
            return r("il2cpp_field_get_parent", "pointer", ["pointer"]);
        },
        get fieldGetFlags() {
            return r("il2cpp_field_get_flags", "int", ["pointer"]);
        },
        get fieldGetName() {
            return r("il2cpp_field_get_name", "pointer", ["pointer"]);
        },
        get fieldGetOffset() {
            return r("il2cpp_field_get_offset", "int32", ["pointer"]);
        },
        get fieldGetStaticValue() {
            return r("il2cpp_field_static_get_value", "void", ["pointer", "pointer"]);
        },
        get fieldGetType() {
            return r("il2cpp_field_get_type", "pointer", ["pointer"]);
        },
        get fieldSetStaticValue() {
            return r("il2cpp_field_static_set_value", "void", ["pointer", "pointer"]);
        },
        get free() {
            return r("il2cpp_free", "void", ["pointer"]);
        },
        get gcCollect() {
            return r("il2cpp_gc_collect", "void", ["int"]);
        },
        get gcCollectALittle() {
            return r("il2cpp_gc_collect_a_little", "void", []);
        },
        get gcDisable() {
            return r("il2cpp_gc_disable", "void", []);
        },
        get gcEnable() {
            return r("il2cpp_gc_enable", "void", []);
        },
        get gcGetHeapSize() {
            return r("il2cpp_gc_get_heap_size", "int64", []);
        },
        get gcGetMaxTimeSlice() {
            return r("il2cpp_gc_get_max_time_slice_ns", "int64", []);
        },
        get gcGetUsedSize() {
            return r("il2cpp_gc_get_used_size", "int64", []);
        },
        get gcHandleGetTarget() {
            return r("il2cpp_gchandle_get_target", "pointer", ["uint32"]);
        },
        get gcHandleFree() {
            return r("il2cpp_gchandle_free", "void", ["uint32"]);
        },
        get gcHandleNew() {
            return r("il2cpp_gchandle_new", "uint32", ["pointer", "bool"]);
        },
        get gcHandleNewWeakRef() {
            return r("il2cpp_gchandle_new_weakref", "uint32", ["pointer", "bool"]);
        },
        get gcIsDisabled() {
            return r("il2cpp_gc_is_disabled", "bool", []);
        },
        get gcIsIncremental() {
            return r("il2cpp_gc_is_incremental", "bool", []);
        },
        get gcSetMaxTimeSlice() {
            return r("il2cpp_gc_set_max_time_slice_ns", "void", ["int64"]);
        },
        get gcStartIncrementalCollection() {
            return r("il2cpp_gc_start_incremental_collection", "void", []);
        },
        get gcStartWorld() {
            return r("il2cpp_start_gc_world", "void", []);
        },
        get gcStopWorld() {
            return r("il2cpp_stop_gc_world", "void", []);
        },
        get getCorlib() {
            return r("il2cpp_get_corlib", "pointer", []);
        },
        get imageGetAssembly() {
            return r("il2cpp_image_get_assembly", "pointer", ["pointer"]);
        },
        get imageGetClass() {
            return r("il2cpp_image_get_class", "pointer", ["pointer", "uint"]);
        },
        get imageGetClassCount() {
            return r("il2cpp_image_get_class_count", "uint32", ["pointer"]);
        },
        get imageGetName() {
            return r("il2cpp_image_get_name", "pointer", ["pointer"]);
        },
        get initialize() {
            return r("il2cpp_init", "void", ["pointer"]);
        },
        get livenessAllocateStruct() {
            return r("il2cpp_unity_liveness_allocate_struct", "pointer", ["pointer", "int", "pointer", "pointer", "pointer"]);
        },
        get livenessCalculationBegin() {
            return r("il2cpp_unity_liveness_calculation_begin", "pointer", ["pointer", "int", "pointer", "pointer", "pointer", "pointer"]);
        },
        get livenessCalculationEnd() {
            return r("il2cpp_unity_liveness_calculation_end", "void", ["pointer"]);
        },
        get livenessCalculationFromStatics() {
            return r("il2cpp_unity_liveness_calculation_from_statics", "void", ["pointer"]);
        },
        get livenessFinalize() {
            return r("il2cpp_unity_liveness_finalize", "void", ["pointer"]);
        },
        get livenessFreeStruct() {
            return r("il2cpp_unity_liveness_free_struct", "void", ["pointer"]);
        },
        get memorySnapshotCapture() {
            return r("il2cpp_capture_memory_snapshot", "pointer", []);
        },
        get memorySnapshotFree() {
            return r("il2cpp_free_captured_memory_snapshot", "void", ["pointer"]);
        },
        get memorySnapshotGetClasses() {
            return r("il2cpp_memory_snapshot_get_classes", "pointer", ["pointer", "pointer"]);
        },
        get memorySnapshotGetObjects() {
            return r("il2cpp_memory_snapshot_get_objects", "pointer", ["pointer", "pointer"]);
        },
        get methodGetClass() {
            return r("il2cpp_method_get_class", "pointer", ["pointer"]);
        },
        get methodGetFlags() {
            return r("il2cpp_method_get_flags", "uint32", ["pointer", "pointer"]);
        },
        get methodGetName() {
            return r("il2cpp_method_get_name", "pointer", ["pointer"]);
        },
        get methodGetObject() {
            return r("il2cpp_method_get_object", "pointer", ["pointer", "pointer"]);
        },
        get methodGetParameterCount() {
            return r("il2cpp_method_get_param_count", "uint8", ["pointer"]);
        },
        get methodGetParameterName() {
            return r("il2cpp_method_get_param_name", "pointer", ["pointer", "uint32"]);
        },
        get methodGetParameters() {
            return r("il2cpp_method_get_parameters", "pointer", ["pointer", "pointer"]);
        },
        get methodGetParameterType() {
            return r("il2cpp_method_get_param", "pointer", ["pointer", "uint32"]);
        },
        get methodGetReturnType() {
            return r("il2cpp_method_get_return_type", "pointer", ["pointer"]);
        },
        get methodIsGeneric() {
            return r("il2cpp_method_is_generic", "bool", ["pointer"]);
        },
        get methodIsInflated() {
            return r("il2cpp_method_is_inflated", "bool", ["pointer"]);
        },
        get methodIsInstance() {
            return r("il2cpp_method_is_instance", "bool", ["pointer"]);
        },
        get monitorEnter() {
            return r("il2cpp_monitor_enter", "void", ["pointer"]);
        },
        get monitorExit() {
            return r("il2cpp_monitor_exit", "void", ["pointer"]);
        },
        get monitorPulse() {
            return r("il2cpp_monitor_pulse", "void", ["pointer"]);
        },
        get monitorPulseAll() {
            return r("il2cpp_monitor_pulse_all", "void", ["pointer"]);
        },
        get monitorTryEnter() {
            return r("il2cpp_monitor_try_enter", "bool", ["pointer", "uint32"]);
        },
        get monitorTryWait() {
            return r("il2cpp_monitor_try_wait", "bool", ["pointer", "uint32"]);
        },
        get monitorWait() {
            return r("il2cpp_monitor_wait", "void", ["pointer"]);
        },
        get objectGetClass() {
            return r("il2cpp_object_get_class", "pointer", ["pointer"]);
        },
        get objectGetVirtualMethod() {
            return r("il2cpp_object_get_virtual_method", "pointer", ["pointer", "pointer"]);
        },
        get objectInitialize() {
            return r("il2cpp_runtime_object_init_exception", "void", ["pointer", "pointer"]);
        },
        get objectNew() {
            return r("il2cpp_object_new", "pointer", ["pointer"]);
        },
        get objectGetSize() {
            return r("il2cpp_object_get_size", "uint32", ["pointer"]);
        },
        get objectUnbox() {
            return r("il2cpp_object_unbox", "pointer", ["pointer"]);
        },
        get resolveInternalCall() {
            return r("il2cpp_resolve_icall", "pointer", ["pointer"]);
        },
        get stringGetChars() {
            return r("il2cpp_string_chars", "pointer", ["pointer"]);
        },
        get stringGetLength() {
            return r("il2cpp_string_length", "int32", ["pointer"]);
        },
        get stringNew() {
            return r("il2cpp_string_new", "pointer", ["pointer"]);
        },
        get valueTypeBox() {
            return r("il2cpp_value_box", "pointer", ["pointer", "pointer"]);
        },
        get threadAttach() {
            return r("il2cpp_thread_attach", "pointer", ["pointer"]);
        },
        get threadDetach() {
            return r("il2cpp_thread_detach", "void", ["pointer"]);
        },
        get threadGetAttachedThreads() {
            return r("il2cpp_thread_get_all_attached_threads", "pointer", ["pointer"]);
        },
        get threadGetCurrent() {
            return r("il2cpp_thread_current", "pointer", []);
        },
        get threadIsVm() {
            return r("il2cpp_is_vm_thread", "bool", ["pointer"]);
        },
        get typeGetClass() {
            return r("il2cpp_class_from_type", "pointer", ["pointer"]);
        },
        get typeGetName() {
            return r("il2cpp_type_get_name", "pointer", ["pointer"]);
        },
        get typeGetObject() {
            return r("il2cpp_type_get_object", "pointer", ["pointer"]);
        },
        get typeGetTypeEnum() {
            return r("il2cpp_type_get_type", "int", ["pointer"]);
        }
    };
    decorate(Il2Cpp.api, lazy);
    getter(Il2Cpp, "memorySnapshotApi", () => new CModule("#include <stdint.h>\n#include <string.h>\n\ntypedef struct Il2CppManagedMemorySnapshot Il2CppManagedMemorySnapshot;\ntypedef struct Il2CppMetadataType Il2CppMetadataType;\n\nstruct Il2CppManagedMemorySnapshot\n{\n  struct Il2CppManagedHeap\n  {\n    uint32_t section_count;\n    void * sections;\n  } heap;\n  struct Il2CppStacks\n  {\n    uint32_t stack_count;\n    void * stacks;\n  } stacks;\n  struct Il2CppMetadataSnapshot\n  {\n    uint32_t type_count;\n    Il2CppMetadataType * types;\n  } metadata_snapshot;\n  struct Il2CppGCHandles\n  {\n    uint32_t tracked_object_count;\n    void ** pointers_to_objects;\n  } gc_handles;\n  struct Il2CppRuntimeInformation\n  {\n    uint32_t pointer_size;\n    uint32_t object_header_size;\n    uint32_t array_header_size;\n    uint32_t array_bounds_offset_in_header;\n    uint32_t array_size_offset_in_header;\n    uint32_t allocation_granularity;\n  } runtime_information;\n  void * additional_user_information;\n};\n\nstruct Il2CppMetadataType\n{\n  uint32_t flags;\n  void * fields;\n  uint32_t field_count;\n  uint32_t statics_size;\n  uint8_t * statics;\n  uint32_t base_or_element_type_index;\n  char * name;\n  const char * assembly_name;\n  uint64_t type_info_address;\n  uint32_t size;\n};\n\nuintptr_t\nil2cpp_memory_snapshot_get_classes (\n    const Il2CppManagedMemorySnapshot * snapshot, Il2CppMetadataType ** iter)\n{\n  const int zero = 0;\n  const void * null = 0;\n\n  if (iter != NULL && snapshot->metadata_snapshot.type_count > zero)\n  {\n    if (*iter == null)\n    {\n      *iter = snapshot->metadata_snapshot.types;\n      return (uintptr_t) (*iter)->type_info_address;\n    }\n    else\n    {\n      Il2CppMetadataType * metadata_type = *iter + 1;\n\n      if (metadata_type < snapshot->metadata_snapshot.types +\n                              snapshot->metadata_snapshot.type_count)\n      {\n        *iter = metadata_type;\n        return (uintptr_t) (*iter)->type_info_address;\n      }\n    }\n  }\n  return 0;\n}\n\nvoid **\nil2cpp_memory_snapshot_get_objects (\n    const Il2CppManagedMemorySnapshot * snapshot, uint32_t * size)\n{\n  *size = snapshot->gc_handles.tracked_object_count;\n  return snapshot->gc_handles.pointers_to_objects;\n}\n"), lazy);
    function r(exportName, retType, argTypes) {
        const handle = Il2Cpp.module.findExportByName(exportName) ?? Il2Cpp.memorySnapshotApi[exportName];
        return new NativeFunction(handle ?? raise(`couldn't resolve export ${exportName}`), retType, argTypes);
    }
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    Il2Cpp.application = {
        /** */
        get dataPath() {
            return unityEngineCall("get_persistentDataPath");
        },
        /** */
        get identifier() {
            return unityEngineCall("get_identifier") ?? unityEngineCall("get_bundleIdentifier");
        },
        /** Gets the version of the application */
        get version() {
            return unityEngineCall("get_version");
        }
    };
    // prettier-ignore
    getter(Il2Cpp, "unityVersion", () => {
        const unityVersion = unityEngineCall("get_unityVersion");
        if (unityVersion != null) {
            return unityVersion;
        }
        const searchPattern = "45 64 69 74 6f 72 ?? 44 61 74 61 ?? 69 6c 32 63 70 70";
        for (const range of Il2Cpp.module.enumerateRanges("r--").concat(Process.getRangeByAddress(Il2Cpp.module.base))) {
            for (let { address } of Memory.scanSync(range.base, range.size, searchPattern)) {
                while (address.readU8() != 0) {
                    address = address.sub(1);
                }
                const match = UnityVersion.find(address.add(1).readCString());
                if (match != undefined) {
                    return match;
                }
            }
        }
        raise("couldn't determine the Unity version, please specify it manually");
    }, lazy);
    // prettier-ignore
    getter(Il2Cpp, "unityVersionIsBelow201830", () => {
        return UnityVersion.lt(Il2Cpp.unityVersion, "2018.3.0");
    }, lazy);
    function unityEngineCall(method) {
        const handle = Il2Cpp.api.resolveInternalCall(Memory.allocUtf8String("UnityEngine.Application::" + method));
        const nativeFunction = new NativeFunction(handle, "pointer", []);
        return nativeFunction.isNull() ? null : new Il2Cpp.String(nativeFunction()).asNullable()?.content ?? null;
    }
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** Dumps the application. */
    function dump(fileName, path) {
        fileName = fileName ?? `${Il2Cpp.application.identifier ?? "unknown"}_${Il2Cpp.application.version ?? "unknown"}.cs`;
        const destination = `${path ?? Il2Cpp.application.dataPath}/${fileName}`;
        const file = new File(destination, "w");
        for (const assembly of Il2Cpp.domain.assemblies) {
            inform(`dumping ${assembly.name}...`);
            for (const klass of assembly.image.classes) {
                file.write(`${klass}\n\n`);
            }
        }
        file.flush();
        file.close();
        ok(`dump saved to ${destination}`);
    }
    Il2Cpp.dump = dump;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** */
    function installExceptionListener(targetThread = "current") {
        const currentThread = Il2Cpp.api.threadGetCurrent();
        return Interceptor.attach(Il2Cpp.module.getExportByName("__cxa_throw"), function (args) {
            if (targetThread == "current" && !Il2Cpp.api.threadGetCurrent().equals(currentThread)) {
                return;
            }
            inform(new Il2Cpp.Object(args[0].readPointer()));
        });
    }
    Il2Cpp.installExceptionListener = installExceptionListener;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** Creates a filter which includes `element`s whose type can be assigned to `klass` variables. */
    function is(klass) {
        return (element) => {
            if (element instanceof Il2Cpp.Class) {
                return klass.isAssignableFrom(element);
            }
            else {
                return klass.isAssignableFrom(element.class);
            }
        };
    }
    Il2Cpp.is = is;
    /** Creates a filter which includes `element`s whose type corresponds to `klass` type. */
    function isExactly(klass) {
        return (element) => {
            if (element instanceof Il2Cpp.Class) {
                return element.equals(klass);
            }
            else {
                return element.class.equals(klass);
            }
        };
    }
    Il2Cpp.isExactly = isExactly;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    Il2Cpp.gc = {
        /** Gets the heap size in bytes. */
        get heapSize() {
            return Il2Cpp.api.gcGetHeapSize();
        },
        /** Determines whether the garbage collector is disabled. */
        get isEnabled() {
            return !Il2Cpp.api.gcIsDisabled();
        },
        /** Determines whether the garbage collector is incremental. */
        get isIncremental() {
            return !!Il2Cpp.api.gcIsIncremental();
        },
        /** Gets the number of nanoseconds the garbage collector can spend in a collection step. */
        get maxTimeSlice() {
            return Il2Cpp.api.gcGetMaxTimeSlice();
        },
        /** Gets the used heap size in bytes. */
        get usedHeapSize() {
            return Il2Cpp.api.gcGetUsedSize();
        },
        /** Enables or disables the garbage collector. */
        set isEnabled(value) {
            value ? Il2Cpp.api.gcEnable() : Il2Cpp.api.gcDisable();
        },
        /** Sets the number of nanoseconds the garbage collector can spend in a collection step. */
        set maxTimeSlice(nanoseconds) {
            Il2Cpp.api.gcSetMaxTimeSlice(nanoseconds);
        },
        /** Returns the heap allocated objects of the specified class. This variant reads GC descriptors. */
        choose(klass) {
            const matches = [];
            const callback = (objects, size) => {
                for (let i = 0; i < size; i++) {
                    matches.push(new Il2Cpp.Object(objects.add(i * Process.pointerSize).readPointer()));
                }
            };
            const chooseCallback = new NativeCallback(callback, "void", ["pointer", "int", "pointer"]);
            if (UnityVersion.gte(Il2Cpp.unityVersion, "2021.2.0")) {
                const realloc = (handle, size) => {
                    if (!handle.isNull() && size.compare(0) == 0) {
                        Il2Cpp.free(handle);
                        return NULL;
                    }
                    else {
                        return Il2Cpp.alloc(size);
                    }
                };
                const reallocCallback = new NativeCallback(realloc, "pointer", ["pointer", "size_t", "pointer"]);
                this.stopWorld();
                const state = Il2Cpp.api.livenessAllocateStruct(klass, 0, chooseCallback, NULL, reallocCallback);
                Il2Cpp.api.livenessCalculationFromStatics(state);
                Il2Cpp.api.livenessFinalize(state);
                this.startWorld();
                Il2Cpp.api.livenessFreeStruct(state);
            }
            else {
                const onWorld = new NativeCallback(() => { }, "void", []);
                const state = Il2Cpp.api.livenessCalculationBegin(klass, 0, chooseCallback, NULL, onWorld, onWorld);
                Il2Cpp.api.livenessCalculationFromStatics(state);
                Il2Cpp.api.livenessCalculationEnd(state);
            }
            return matches;
        },
        /** Forces a garbage collection of the specified generation. */
        collect(generation) {
            Il2Cpp.api.gcCollect(generation < 0 ? 0 : generation > 2 ? 2 : generation);
        },
        /** Forces a garbage collection. */
        collectALittle() {
            Il2Cpp.api.gcCollectALittle();
        },
        /** Resumes all the previously stopped threads. */
        startWorld() {
            return Il2Cpp.api.gcStartWorld();
        },
        /** Performs an incremental garbage collection. */
        startIncrementalCollection() {
            return Il2Cpp.api.gcStartIncrementalCollection();
        },
        /** Stops all threads which may access the garbage collected heap, other than the caller. */
        stopWorld() {
            return Il2Cpp.api.gcStopWorld();
        }
    };
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** Allocates the given amount of bytes. */
    function alloc(size = Process.pointerSize) {
        return Il2Cpp.api.alloc(size);
    }
    Il2Cpp.alloc = alloc;
    /** Frees memory. */
    function free(pointer) {
        return Il2Cpp.api.free(pointer);
    }
    Il2Cpp.free = free;
    /** @internal */
    function read(pointer, type) {
        switch (type.typeEnum) {
            case Il2Cpp.Type.enum.boolean:
                return !!pointer.readS8();
            case Il2Cpp.Type.enum.byte:
                return pointer.readS8();
            case Il2Cpp.Type.enum.unsignedByte:
                return pointer.readU8();
            case Il2Cpp.Type.enum.short:
                return pointer.readS16();
            case Il2Cpp.Type.enum.unsignedShort:
                return pointer.readU16();
            case Il2Cpp.Type.enum.int:
                return pointer.readS32();
            case Il2Cpp.Type.enum.unsignedInt:
                return pointer.readU32();
            case Il2Cpp.Type.enum.char:
                return pointer.readU16();
            case Il2Cpp.Type.enum.long:
                return pointer.readS64();
            case Il2Cpp.Type.enum.unsignedLong:
                return pointer.readU64();
            case Il2Cpp.Type.enum.float:
                return pointer.readFloat();
            case Il2Cpp.Type.enum.double:
                return pointer.readDouble();
            case Il2Cpp.Type.enum.nativePointer:
            case Il2Cpp.Type.enum.unsignedNativePointer:
                return pointer.readPointer();
            case Il2Cpp.Type.enum.pointer:
                return new Il2Cpp.Pointer(pointer.readPointer(), type.class.baseType);
            case Il2Cpp.Type.enum.valueType:
                return new Il2Cpp.ValueType(pointer, type);
            case Il2Cpp.Type.enum.object:
            case Il2Cpp.Type.enum.class:
                return new Il2Cpp.Object(pointer.readPointer());
            case Il2Cpp.Type.enum.genericInstance:
                return type.class.isValueType ? new Il2Cpp.ValueType(pointer, type) : new Il2Cpp.Object(pointer.readPointer());
            case Il2Cpp.Type.enum.string:
                return new Il2Cpp.String(pointer.readPointer());
            case Il2Cpp.Type.enum.array:
            case Il2Cpp.Type.enum.multidimensionalArray:
                return new Il2Cpp.Array(pointer.readPointer());
        }
        raise(`couldn't read the value from ${pointer} using an unhandled or unknown type ${type.name} (${type.typeEnum}), please file an issue`);
    }
    Il2Cpp.read = read;
    /** @internal */
    function write(pointer, value, type) {
        switch (type.typeEnum) {
            case Il2Cpp.Type.enum.boolean:
                return pointer.writeS8(+value);
            case Il2Cpp.Type.enum.byte:
                return pointer.writeS8(value);
            case Il2Cpp.Type.enum.unsignedByte:
                return pointer.writeU8(value);
            case Il2Cpp.Type.enum.short:
                return pointer.writeS16(value);
            case Il2Cpp.Type.enum.unsignedShort:
                return pointer.writeU16(value);
            case Il2Cpp.Type.enum.int:
                return pointer.writeS32(value);
            case Il2Cpp.Type.enum.unsignedInt:
                return pointer.writeU32(value);
            case Il2Cpp.Type.enum.char:
                return pointer.writeU16(value);
            case Il2Cpp.Type.enum.long:
                return pointer.writeS64(value);
            case Il2Cpp.Type.enum.unsignedLong:
                return pointer.writeU64(value);
            case Il2Cpp.Type.enum.float:
                return pointer.writeFloat(value);
            case Il2Cpp.Type.enum.double:
                return pointer.writeDouble(value);
            case Il2Cpp.Type.enum.nativePointer:
            case Il2Cpp.Type.enum.unsignedNativePointer:
            case Il2Cpp.Type.enum.pointer:
            case Il2Cpp.Type.enum.valueType:
            case Il2Cpp.Type.enum.string:
            case Il2Cpp.Type.enum.object:
            case Il2Cpp.Type.enum.class:
            case Il2Cpp.Type.enum.array:
            case Il2Cpp.Type.enum.multidimensionalArray:
            case Il2Cpp.Type.enum.genericInstance:
                if (value instanceof Il2Cpp.ValueType) {
                    Memory.copy(pointer, value, type.class.valueTypeSize);
                    return pointer;
                }
                return pointer.writePointer(value);
        }
        raise(`couldn't write value ${value} to ${pointer} using an unhandled or unknown type ${type.name} (${type.typeEnum}), please file an issue`);
    }
    Il2Cpp.write = write;
    /** @internal */
    function fromFridaValue(value, type) {
        if (globalThis.Array.isArray(value)) {
            return arrayToValueType(type, value);
        }
        else if (value instanceof NativePointer) {
            if (type.isByReference) {
                return new Il2Cpp.Reference(value, type);
            }
            switch (type.typeEnum) {
                case Il2Cpp.Type.enum.pointer:
                    return new Il2Cpp.Pointer(value, type.class.baseType);
                case Il2Cpp.Type.enum.string:
                    return new Il2Cpp.String(value);
                case Il2Cpp.Type.enum.class:
                case Il2Cpp.Type.enum.genericInstance:
                case Il2Cpp.Type.enum.object:
                    return new Il2Cpp.Object(value);
                case Il2Cpp.Type.enum.array:
                case Il2Cpp.Type.enum.multidimensionalArray:
                    return new Il2Cpp.Array(value);
                default:
                    return value;
            }
        }
        else if (type.typeEnum == Il2Cpp.Type.enum.boolean) {
            return !!value;
        }
        else {
            return value;
        }
    }
    Il2Cpp.fromFridaValue = fromFridaValue;
    /** @internal */
    function toFridaValue(value) {
        if (typeof value == "boolean") {
            return +value;
        }
        else if (value instanceof Il2Cpp.ValueType) {
            return valueTypeToArray(value);
        }
        else {
            return value;
        }
    }
    Il2Cpp.toFridaValue = toFridaValue;
    /** @internal */
    function valueTypeToArray(value) {
        const instanceFields = value.type.class.fields.filter(_ => !_.isStatic);
        return instanceFields.length == 0
            ? [value.handle.readU8()]
            : instanceFields
                .map(_ => _.withHolder(value).value)
                .map(value => value instanceof Il2Cpp.ValueType
                ? valueTypeToArray(value)
                : value instanceof NativeStruct
                    ? value.handle
                    : typeof value == "boolean"
                        ? +value
                        : value);
    }
    /** @internal */
    function arrayToValueType(type, nativeValues) {
        function iter(type, startOffset = 0) {
            const arr = [];
            for (const field of type.class.fields) {
                if (!field.isStatic) {
                    const offset = startOffset + field.offset - Il2Cpp.Object.headerSize;
                    if (field.type.typeEnum == Il2Cpp.Type.enum.valueType ||
                        (field.type.typeEnum == Il2Cpp.Type.enum.genericInstance && field.type.class.isValueType)) {
                        arr.push(...iter(field.type, offset));
                    }
                    else {
                        arr.push([field.type.typeEnum, offset]);
                    }
                }
            }
            if (arr.length == 0) {
                arr.push([Il2Cpp.Type.enum.unsignedByte, 0]);
            }
            return arr;
        }
        const valueType = Memory.alloc(type.class.valueTypeSize);
        nativeValues = nativeValues.flat(Infinity);
        const typesAndOffsets = iter(type);
        for (let i = 0; i < nativeValues.length; i++) {
            const value = nativeValues[i];
            const [typeEnum, offset] = typesAndOffsets[i];
            const pointer = valueType.add(offset);
            switch (typeEnum) {
                case Il2Cpp.Type.enum.boolean:
                    pointer.writeS8(value);
                    break;
                case Il2Cpp.Type.enum.byte:
                    pointer.writeS8(value);
                    break;
                case Il2Cpp.Type.enum.unsignedByte:
                    pointer.writeU8(value);
                    break;
                case Il2Cpp.Type.enum.short:
                    pointer.writeS16(value);
                    break;
                case Il2Cpp.Type.enum.unsignedShort:
                    pointer.writeU16(value);
                    break;
                case Il2Cpp.Type.enum.int:
                    pointer.writeS32(value);
                    break;
                case Il2Cpp.Type.enum.unsignedInt:
                    pointer.writeU32(value);
                    break;
                case Il2Cpp.Type.enum.char:
                    pointer.writeU16(value);
                    break;
                case Il2Cpp.Type.enum.long:
                    pointer.writeS64(value);
                    break;
                case Il2Cpp.Type.enum.unsignedLong:
                    pointer.writeU64(value);
                    break;
                case Il2Cpp.Type.enum.float:
                    pointer.writeFloat(value);
                    break;
                case Il2Cpp.Type.enum.double:
                    pointer.writeDouble(value);
                    break;
                case Il2Cpp.Type.enum.nativePointer:
                case Il2Cpp.Type.enum.unsignedNativePointer:
                case Il2Cpp.Type.enum.pointer:
                case Il2Cpp.Type.enum.array:
                case Il2Cpp.Type.enum.multidimensionalArray:
                case Il2Cpp.Type.enum.string:
                case Il2Cpp.Type.enum.object:
                case Il2Cpp.Type.enum.class:
                case Il2Cpp.Type.enum.genericInstance:
                    pointer.writePointer(value);
                    break;
                default:
                    warn(`arrayToValueType: defaulting ${typeEnum} to pointer`);
                    pointer.writePointer(value);
                    break;
            }
        }
        return new Il2Cpp.ValueType(valueType, type);
    }
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    getter(Il2Cpp, "moduleName", () => {
        switch (Process.platform) {
            case "linux":
                try {
                    const _ = Java.androidVersion;
                    return "libil2cpp.so";
                }
                catch (e) {
                    return "GameAssembly.so";
                }
            case "windows":
                return "GameAssembly.dll";
            case "darwin":
                try {
                    return "UnityFramework";
                }
                catch (e) {
                    return "GameAssembly.dylib";
                }
        }
        raise(`${Process.platform} is not supported yet`);
    });
    // prettier-ignore
    getter(Il2Cpp, "module", () => {
        return Process.getModuleByName(Il2Cpp.moduleName);
    }, lazy);
    /** @internal Waits for Unity and Il2Cpp native libraries to be loaded and initialized. */
    async function initialize(blocking = false) {
        if (Process.platform == "darwin") {
            Reflect.defineProperty(Il2Cpp, "moduleName", {
                value: DebugSymbol.fromName("il2cpp_init").moduleName ?? (await forModule("UnityFramework", "GameAssembly.dylib"))
            });
        }
        else {
            await forModule(Il2Cpp.moduleName);
        }
        if (Il2Cpp.api.getCorlib().isNull()) {
            return await new Promise(resolve => {
                const interceptor = Interceptor.attach(Il2Cpp.api.initialize, {
                    onLeave() {
                        interceptor.detach();
                        blocking ? resolve(true) : setImmediate(() => resolve(false));
                    }
                });
            });
        }
        return false;
    }
    Il2Cpp.initialize = initialize;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** Attaches the caller thread to Il2Cpp domain and executes the given block.  */
    async function perform(block, flag = "bind") {
        try {
            const isInMainThread = await Il2Cpp.initialize(flag == "main");
            if (flag == "main" && !isInMainThread) {
                return perform(() => Il2Cpp.mainThread.schedule(block), "free");
            }
            let thread = Il2Cpp.currentThread;
            const isForeignThread = thread == null;
            thread ??= Il2Cpp.domain.attach();
            const result = block();
            if (isForeignThread) {
                if (flag == "free") {
                    thread.detach();
                }
                else if (flag == "bind") {
                    Script.bindWeak(globalThis, () => thread.detach());
                }
            }
            return result instanceof Promise ? await result : result;
        }
        catch (error) {
            Script.nextTick(_ => { throw _; }, error); // prettier-ignore
            return Promise.reject(error);
        }
    }
    Il2Cpp.perform = perform;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Tracer {
        /** @internal */
        #state = {
            depth: 0,
            buffer: [],
            history: new Set(),
            flush: () => {
                if (this.#state.depth == 0) {
                    const message = `\n${this.#state.buffer.join("\n")}\n`;
                    if (this.#verbose) {
                        inform(message);
                    }
                    else {
                        const hash = cyrb53(message);
                        if (!this.#state.history.has(hash)) {
                            this.#state.history.add(hash);
                            inform(message);
                        }
                    }
                    this.#state.buffer.length = 0;
                }
            }
        };
        /** @internal */
        #threadId = Il2Cpp.mainThread.id;
        /** @internal */
        #verbose = false;
        /** @internal */
        #applier;
        /** @internal */
        #targets = [];
        /** @internal */
        #domain;
        /** @internal */
        #assemblies;
        /** @internal */
        #classes;
        /** @internal */
        #methods;
        /** @internal */
        #assemblyFilter;
        /** @internal */
        #classFilter;
        /** @internal */
        #methodFilter;
        /** @internal */
        #parameterFilter;
        constructor(applier) {
            this.#applier = applier;
        }
        /** */
        thread(thread) {
            this.#threadId = thread.id;
            return this;
        }
        /** Determines whether print duplicate logs. */
        verbose(value) {
            this.#verbose = value;
            return this;
        }
        /** Sets the application domain as the place where to find the target methods. */
        domain() {
            this.#domain = Il2Cpp.domain;
            return this;
        }
        /** Sets the passed `assemblies` as the place where to find the target methods. */
        assemblies(...assemblies) {
            this.#assemblies = assemblies;
            return this;
        }
        /** Sets the passed `classes` as the place where to find the target methods. */
        classes(...classes) {
            this.#classes = classes;
            return this;
        }
        /** Sets the passed `methods` as the target methods. */
        methods(...methods) {
            this.#methods = methods;
            return this;
        }
        /** Filters the assemblies where to find the target methods. */
        filterAssemblies(filter) {
            this.#assemblyFilter = filter;
            return this;
        }
        /** Filters the classes where to find the target methods. */
        filterClasses(filter) {
            this.#classFilter = filter;
            return this;
        }
        /** Filters the target methods. */
        filterMethods(filter) {
            this.#methodFilter = filter;
            return this;
        }
        /** Filters the target methods. */
        filterParameters(filter) {
            this.#parameterFilter = filter;
            return this;
        }
        /** Commits the current changes by finding the target methods. */
        and() {
            const filterMethod = (method) => {
                if (this.#parameterFilter == undefined) {
                    this.#targets.push(method);
                    return;
                }
                for (const parameter of method.parameters) {
                    if (this.#parameterFilter(parameter)) {
                        this.#targets.push(method);
                        break;
                    }
                }
            };
            const filterMethods = (values) => {
                for (const method of values) {
                    filterMethod(method);
                }
            };
            const filterClass = (klass) => {
                if (this.#methodFilter == undefined) {
                    filterMethods(klass.methods);
                    return;
                }
                for (const method of klass.methods) {
                    if (this.#methodFilter(method)) {
                        filterMethod(method);
                    }
                }
            };
            const filterClasses = (values) => {
                for (const klass of values) {
                    filterClass(klass);
                }
            };
            const filterAssembly = (assembly) => {
                if (this.#classFilter == undefined) {
                    filterClasses(assembly.image.classes);
                    return;
                }
                for (const klass of assembly.image.classes) {
                    if (this.#classFilter(klass)) {
                        filterClass(klass);
                    }
                }
            };
            const filterAssemblies = (assemblies) => {
                for (const assembly of assemblies) {
                    filterAssembly(assembly);
                }
            };
            const filterDomain = (domain) => {
                if (this.#assemblyFilter == undefined) {
                    filterAssemblies(domain.assemblies);
                    return;
                }
                for (const assembly of domain.assemblies) {
                    if (this.#assemblyFilter(assembly)) {
                        filterAssembly(assembly);
                    }
                }
            };
            this.#methods
                ? filterMethods(this.#methods)
                : this.#classes
                    ? filterClasses(this.#classes)
                    : this.#assemblies
                        ? filterAssemblies(this.#assemblies)
                        : this.#domain
                            ? filterDomain(this.#domain)
                            : undefined;
            this.#assemblies = undefined;
            this.#classes = undefined;
            this.#methods = undefined;
            this.#assemblyFilter = undefined;
            this.#classFilter = undefined;
            this.#methodFilter = undefined;
            this.#parameterFilter = undefined;
            return this;
        }
        /** Starts tracing. */
        attach() {
            for (const target of this.#targets) {
                if (!target.virtualAddress.isNull()) {
                    try {
                        this.#applier(target, this.#state, this.#threadId);
                    }
                    catch (e) {
                        switch (e.message) {
                            case /unable to intercept function at \w+; please file a bug/.exec(e.message)?.input:
                            case "already replaced this function":
                                break;
                            default:
                                throw e;
                        }
                    }
                }
            }
        }
    }
    Il2Cpp.Tracer = Tracer;
    /** */
    function trace(parameters = false) {
        const applier = () => (method, state, threadId) => {
            const paddedVirtualAddress = method.relativeVirtualAddress.toString(16).padStart(8, "0");
            Interceptor.attach(method.virtualAddress, {
                onEnter() {
                    if (this.threadId == threadId) {
                        // prettier-ignore
                        state.buffer.push(`\x1b[2m0x${paddedVirtualAddress}\x1b[0m ${`â”‚ `.repeat(state.depth++)}â”Œâ”€\x1b[35m${method.class.type.name}::\x1b[1m${method.name}\x1b[0m\x1b[0m`);
                    }
                },
                onLeave() {
                    if (this.threadId == threadId) {
                        // prettier-ignore
                        state.buffer.push(`\x1b[2m0x${paddedVirtualAddress}\x1b[0m ${`â”‚ `.repeat(--state.depth)}â””â”€\x1b[33m${method.class.type.name}::\x1b[1m${method.name}\x1b[0m\x1b[0m`);
                        state.flush();
                    }
                }
            });
        };
        const applierWithParameters = () => (method, state, threadId) => {
            const paddedVirtualAddress = method.relativeVirtualAddress.toString(16).padStart(8, "0");
            const startIndex = +!method.isStatic | +Il2Cpp.unityVersionIsBelow201830;
            const callback = function (...args) {
                if (this.threadId == threadId) {
                    const thisParameter = method.isStatic ? undefined : new Il2Cpp.Parameter("this", -1, method.class.type);
                    const parameters = thisParameter ? [thisParameter].concat(method.parameters) : method.parameters;
                    // prettier-ignore
                    state.buffer.push(`\x1b[2m0x${paddedVirtualAddress}\x1b[0m ${`â”‚ `.repeat(state.depth++)}â”Œâ”€\x1b[35m${method.class.type.name}::\x1b[1m${method.name}\x1b[0m\x1b[0m(${parameters.map(e => `\x1b[32m${e.name}\x1b[0m = \x1b[31m${Il2Cpp.fromFridaValue(args[e.position + startIndex], e.type)}\x1b[0m`).join(", ")})`);
                }
                const returnValue = method.nativeFunction(...args);
                if (this.threadId == threadId) {
                    // prettier-ignore
                    state.buffer.push(`\x1b[2m0x${paddedVirtualAddress}\x1b[0m ${`â”‚ `.repeat(--state.depth)}â””â”€\x1b[33m${method.class.type.name}::\x1b[1m${method.name}\x1b[0m\x1b[0m${returnValue == undefined ? "" : ` = \x1b[36m${Il2Cpp.fromFridaValue(returnValue, method.returnType)}`}\x1b[0m`);
                    state.flush();
                }
                return returnValue;
            };
            method.revert();
            const nativeCallback = new NativeCallback(callback, method.returnType.fridaAlias, method.fridaSignature);
            Interceptor.replace(method.virtualAddress, nativeCallback);
        };
        return new Il2Cpp.Tracer(parameters ? applierWithParameters() : applier());
    }
    Il2Cpp.trace = trace;
    /** */
    function backtrace(mode) {
        const methods = Il2Cpp.domain.assemblies
            .flatMap(_ => _.image.classes.flatMap(_ => _.methods.filter(_ => !_.virtualAddress.isNull())))
            .sort((_, __) => _.virtualAddress.compare(__.virtualAddress));
        const searchInsert = (target) => {
            let left = 0;
            let right = methods.length - 1;
            while (left <= right) {
                const pivot = Math.floor((left + right) / 2);
                const comparison = methods[pivot].virtualAddress.compare(target);
                if (comparison == 0) {
                    return methods[pivot];
                }
                else if (comparison > 0) {
                    right = pivot - 1;
                }
                else {
                    left = pivot + 1;
                }
            }
            return methods[right];
        };
        const applier = () => (method, state, threadId) => {
            Interceptor.attach(method.virtualAddress, function () {
                if (this.threadId == threadId) {
                    const handles = globalThis.Thread.backtrace(this.context, mode);
                    handles.unshift(method.virtualAddress);
                    for (const handle of handles) {
                        if (handle.compare(Il2Cpp.module.base) > 0 && handle.compare(Il2Cpp.module.base.add(Il2Cpp.module.size)) < 0) {
                            const method = searchInsert(handle);
                            if (method) {
                                const offset = handle.sub(method.virtualAddress);
                                if (offset.compare(0xfff) < 0) {
                                    // prettier-ignore
                                    state.buffer.push(`\x1b[2m0x${method.relativeVirtualAddress.toString(16).padStart(8, "0")}\x1b[0m\x1b[2m+0x${offset.toString(16).padStart(3, `0`)}\x1b[0m ${method.class.type.name}::\x1b[1m${method.name}\x1b[0m`);
                                }
                            }
                        }
                    }
                    state.flush();
                }
            });
        };
        return new Il2Cpp.Tracer(applier());
    }
    Il2Cpp.backtrace = backtrace;
    /** https://stackoverflow.com/a/52171480/16885569 */
    function cyrb53(str) {
        let h1 = 0xdeadbeef;
        let h2 = 0x41c6ce57;
        for (let i = 0, ch; i < str.length; i++) {
            ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507);
        h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);
        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507);
        h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);
        return 4294967296 * (2097151 & h2) + (h1 >>> 0);
    }
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Array extends NativeStruct {
        /** Gets the Il2CppArray struct size, possibly equal to `Process.pointerSize * 4`. */
        static get headerSize() {
            return Il2Cpp.corlib.class("System.Array").instanceSize;
        }
        /** @internal Gets a pointer to the first element of the current array. */
        get elements() {
            const string = Il2Cpp.string("vfsfitvnm");
            const array = string.object.method("Split", 1).invoke(NULL);
            // prettier-ignore
            const offset = array.handle.offsetOf(_ => _.readPointer().equals(string.handle))
                ?? raise("couldn't find the elements offset in the native array struct");
            // prettier-ignore
            getter(Il2Cpp.Array.prototype, "elements", function () {
                return new Il2Cpp.Pointer(this.handle.add(offset), this.elementType);
            }, lazy);
            return this.elements;
        }
        /** Gets the size of the object encompassed by the current array. */
        get elementSize() {
            return this.elementType.class.arrayElementSize;
        }
        /** Gets the type of the object encompassed by the current array. */
        get elementType() {
            return this.object.class.type.class.baseType;
        }
        /** Gets the total number of elements in all the dimensions of the current array. */
        get length() {
            return Il2Cpp.api.arrayGetLength(this);
        }
        /** Gets the encompassing object of the current array. */
        get object() {
            return new Il2Cpp.Object(this);
        }
        /** Gets the element at the specified index of the current array. */
        get(index) {
            if (index < 0 || index >= this.length) {
                raise(`cannot get element at index ${index} as the array length is ${this.length}`);
            }
            return this.elements.get(index);
        }
        /** Sets the element at the specified index of the current array. */
        set(index, value) {
            if (index < 0 || index >= this.length) {
                raise(`cannot set element at index ${index} as the array length is ${this.length}`);
            }
            this.elements.set(index, value);
        }
        /** */
        toString() {
            return this.isNull() ? "null" : `[${this.elements.read(this.length, 0)}]`;
        }
        /** Iterable. */
        *[Symbol.iterator]() {
            for (let i = 0; i < this.length; i++) {
                yield this.elements.get(i);
            }
        }
    }
    __decorate([
        lazy
    ], Array.prototype, "elementSize", null);
    __decorate([
        lazy
    ], Array.prototype, "elementType", null);
    __decorate([
        lazy
    ], Array.prototype, "length", null);
    __decorate([
        lazy
    ], Array.prototype, "object", null);
    __decorate([
        lazy
    ], Array, "headerSize", null);
    Il2Cpp.Array = Array;
    /** @internal */
    function array(klass, lengthOrElements) {
        const length = typeof lengthOrElements == "number" ? lengthOrElements : lengthOrElements.length;
        const array = new Il2Cpp.Array(Il2Cpp.api.arrayNew(klass, length));
        if (globalThis.Array.isArray(lengthOrElements)) {
            array.elements.write(lengthOrElements);
        }
        return array;
    }
    Il2Cpp.array = array;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    let Assembly = class Assembly extends NativeStruct {
        /** Gets the image of this assembly. */
        get image() {
            let get = function () {
                return new Il2Cpp.Image(Il2Cpp.api.assemblyGetImage(this));
            };
            try {
                Il2Cpp.api.assemblyGetImage;
            }
            catch (_) {
                get = function () {
                    // We need to get the System.Reflection.Module of the current assembly;
                    // System.Reflection.Assembly::GetModulesInternal, for some reason,
                    // throws a NullReferenceExceptionin Unity 5.3.8f1, so we must rely on
                    // System.Type::get_Module instead.
                    // Now we need to get any System.Type of this assembly.
                    // We cannot use System.Reflection.Assembly::GetTypes because it may
                    // return an empty array; hence we use System.Reflection.Assembly::GetType
                    // to retrieve <Module>, a class/type that seems to be always present
                    // (despite being excluded from System.Reflection.Assembly::GetTypes).
                    return new Il2Cpp.Image(this.object
                        .method("GetType", 1)
                        .invoke(Il2Cpp.string("<Module>"))
                        .method("get_Module")
                        .invoke()
                        .field("_impl").value);
                };
            }
            getter(Il2Cpp.Assembly.prototype, "image", get, lazy);
            return this.image;
        }
        /** Gets the name of this assembly. */
        get name() {
            return this.image.name.replace(".dll", "");
        }
        /** Gets the encompassing object of the current assembly. */
        get object() {
            for (const _ of Il2Cpp.domain.object.method("GetAssemblies", 1).invoke(false)) {
                if (_.field("_mono_assembly").value.equals(this)) {
                    return _;
                }
            }
            raise("couldn't find the object of the native assembly struct");
        }
    };
    __decorate([
        lazy
    ], Assembly.prototype, "name", null);
    __decorate([
        lazy
    ], Assembly.prototype, "object", null);
    Assembly = __decorate([
        recycle
    ], Assembly);
    Il2Cpp.Assembly = Assembly;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    let Class = class Class extends NativeStruct {
        /** Gets the actual size of the instance of the current class. */
        get actualInstanceSize() {
            const SystemString = Il2Cpp.corlib.class("System.String");
            // prettier-ignore
            const offset = SystemString.handle.offsetOf(_ => _.readInt() == SystemString.instanceSize - 2)
                ?? raise("couldn't find the actual instance size offset in the native class struct");
            // prettier-ignore
            getter(Il2Cpp.Class.prototype, "actualInstanceSize", function () {
                return this.handle.add(offset).readS32();
            }, lazy);
            return this.actualInstanceSize;
        }
        /** Gets the array class which encompass the current class. */
        get arrayClass() {
            return new Il2Cpp.Class(Il2Cpp.api.classGetArrayClass(this, 1));
        }
        /** Gets the size of the object encompassed by the current array class. */
        get arrayElementSize() {
            return Il2Cpp.api.classGetArrayElementSize(this);
        }
        /** Gets the name of the assembly in which the current class is defined. */
        get assemblyName() {
            return Il2Cpp.api.classGetAssemblyName(this).readUtf8String();
        }
        /** Gets the class that declares the current nested class. */
        get declaringClass() {
            return new Il2Cpp.Class(Il2Cpp.api.classGetDeclaringType(this)).asNullable();
        }
        /** Gets the encompassed type of this array, reference, pointer or enum type. */
        get baseType() {
            return new Il2Cpp.Type(Il2Cpp.api.classGetBaseType(this)).asNullable();
        }
        /** Gets the class of the object encompassed or referred to by the current array, pointer or reference class. */
        get elementClass() {
            return new Il2Cpp.Class(Il2Cpp.api.classGetElementClass(this)).asNullable();
        }
        /** Gets the fields of the current class. */
        get fields() {
            return readNativeIterator(_ => Il2Cpp.api.classGetFields(this, _)).map(_ => new Il2Cpp.Field(_));
        }
        /** Gets the flags of the current class. */
        get flags() {
            return Il2Cpp.api.classGetFlags(this);
        }
        /** Gets the full name (namespace + name) of the current class. */
        get fullName() {
            return this.namespace ? `${this.namespace}.${this.name}` : this.name;
        }
        /** Gets the generics parameters of this generic class. */
        get generics() {
            if (!this.isGeneric && !this.isInflated) {
                return [];
            }
            const types = this.type.object.method("GetGenericArguments").invoke();
            return globalThis.Array.from(types).map(_ => new Il2Cpp.Class(Il2Cpp.api.classFromObject(_)));
        }
        /** Determines whether the GC has tracking references to the current class instances. */
        get hasReferences() {
            return !!Il2Cpp.api.classHasReferences(this);
        }
        /** Determines whether ther current class has a valid static constructor. */
        get hasStaticConstructor() {
            const staticConstructor = this.tryMethod(".cctor");
            return staticConstructor != null && !staticConstructor.virtualAddress.isNull();
        }
        /** Gets the image in which the current class is defined. */
        get image() {
            return new Il2Cpp.Image(Il2Cpp.api.classGetImage(this));
        }
        /** Gets the size of the instance of the current class. */
        get instanceSize() {
            return Il2Cpp.api.classGetInstanceSize(this);
        }
        /** Determines whether the current class is abstract. */
        get isAbstract() {
            return !!Il2Cpp.api.classIsAbstract(this);
        }
        /** Determines whether the current class is blittable. */
        get isBlittable() {
            return !!Il2Cpp.api.classIsBlittable(this);
        }
        /** Determines whether the current class is an enumeration. */
        get isEnum() {
            return !!Il2Cpp.api.classIsEnum(this);
        }
        /** Determines whether the current class is a generic one. */
        get isGeneric() {
            return !!Il2Cpp.api.classIsGeneric(this);
        }
        /** Determines whether the current class is inflated. */
        get isInflated() {
            return !!Il2Cpp.api.classIsInflated(this);
        }
        /** Determines whether the current class is an interface. */
        get isInterface() {
            return !!Il2Cpp.api.classIsInterface(this);
        }
        /** Determines whether the current class is a value type. */
        get isValueType() {
            return !!Il2Cpp.api.classIsValueType(this);
        }
        /** Gets the interfaces implemented or inherited by the current class. */
        get interfaces() {
            return readNativeIterator(_ => Il2Cpp.api.classGetInterfaces(this, _)).map(_ => new Il2Cpp.Class(_));
        }
        /** Gets the methods implemented by the current class. */
        get methods() {
            return readNativeIterator(_ => Il2Cpp.api.classGetMethods(this, _)).map(_ => new Il2Cpp.Method(_));
        }
        /** Gets the name of the current class. */
        get name() {
            return Il2Cpp.api.classGetName(this).readUtf8String();
        }
        /** Gets the namespace of the current class. */
        get namespace() {
            return Il2Cpp.api.classGetNamespace(this).readUtf8String();
        }
        /** Gets the classes nested inside the current class. */
        get nestedClasses() {
            return readNativeIterator(_ => Il2Cpp.api.classGetNestedClasses(this, _)).map(_ => new Il2Cpp.Class(_));
        }
        /** Gets the class from which the current class directly inherits. */
        get parent() {
            return new Il2Cpp.Class(Il2Cpp.api.classGetParent(this)).asNullable();
        }
        /** Gets the rank (number of dimensions) of the current array class. */
        get rank() {
            let rank = 0;
            const name = this.name;
            for (let i = this.name.length - 1; i > 0; i--) {
                const c = name[i];
                if (c == "]")
                    rank++;
                else if (c == "[" || rank == 0)
                    break;
                else if (c == ",")
                    rank++;
                else
                    break;
            }
            return rank;
        }
        /** Gets a pointer to the static fields of the current class. */
        get staticFieldsData() {
            return Il2Cpp.api.classGetStaticFieldData(this);
        }
        /** Gets the size of the instance - as a value type - of the current class. */
        get valueTypeSize() {
            return Il2Cpp.api.classGetValueTypeSize(this, NULL);
        }
        /** Gets the type of the current class. */
        get type() {
            return new Il2Cpp.Type(Il2Cpp.api.classGetType(this));
        }
        /** Allocates a new object of the current class. */
        alloc() {
            return new Il2Cpp.Object(Il2Cpp.api.objectNew(this));
        }
        /** Gets the field identified by the given name. */
        field(name) {
            return this.tryField(name) ?? raise(`couldn't find field ${name} in class ${this.type.name}`);
        }
        /** Builds a generic instance of the current generic class. */
        inflate(...classes) {
            if (!this.isGeneric) {
                raise(`cannot inflate class ${this.type.name} as it has no generic parameters`);
            }
            if (this.generics.length != classes.length) {
                raise(`cannot inflate class ${this.type.name} as it needs ${this.generics.length} generic parameter(s), not ${classes.length}`);
            }
            const types = classes.map(_ => _.type.object);
            const typeArray = Il2Cpp.array(Il2Cpp.corlib.class("System.Type"), types);
            const inflatedType = this.type.object.method("MakeGenericType", 1).invoke(typeArray);
            return new Il2Cpp.Class(Il2Cpp.api.classFromObject(inflatedType));
        }
        /** Calls the static constructor of the current class. */
        initialize() {
            Il2Cpp.api.classInitialize(this);
            return this;
        }
        /** Determines whether an instance of `other` class can be assigned to a variable of the current type. */
        isAssignableFrom(other) {
            return !!Il2Cpp.api.classIsAssignableFrom(this, other);
        }
        /** Determines whether the current class derives from `other` class. */
        isSubclassOf(other, checkInterfaces) {
            return !!Il2Cpp.api.classIsSubclassOf(this, other, +checkInterfaces);
        }
        /** Gets the method identified by the given name and parameter count. */
        method(name, parameterCount = -1) {
            return this.tryMethod(name, parameterCount) ?? raise(`couldn't find method ${name} in class ${this.type.name}`);
        }
        /** Gets the nested class with the given name. */
        nested(name) {
            return this.tryNested(name) ?? raise(`couldn't find nested class ${name} in class ${this.type.name}`);
        }
        /** Allocates a new object of the current class and calls its default constructor. */
        new() {
            const object = this.alloc();
            const exceptionArray = Memory.alloc(Process.pointerSize);
            Il2Cpp.api.objectInitialize(object, exceptionArray);
            const exception = exceptionArray.readPointer();
            if (!exception.isNull()) {
                raise(new Il2Cpp.Object(exception).toString());
            }
            return object;
        }
        /** Gets the field with the given name. */
        tryField(name) {
            return new Il2Cpp.Field(Il2Cpp.api.classGetFieldFromName(this, Memory.allocUtf8String(name))).asNullable();
        }
        /** Gets the method with the given name and parameter count. */
        tryMethod(name, parameterCount = -1) {
            return new Il2Cpp.Method(Il2Cpp.api.classGetMethodFromName(this, Memory.allocUtf8String(name), parameterCount)).asNullable();
        }
        /** Gets the nested class with the given name. */
        tryNested(name) {
            return this.nestedClasses.find(_ => _.name == name);
        }
        /** */
        toString() {
            const inherited = [this.parent].concat(this.interfaces);
            return `\
// ${this.assemblyName}
${this.isEnum ? `enum` : this.isValueType ? `struct` : this.isInterface ? `interface` : `class`} \
${this.type.name}\
${inherited ? ` : ${inherited.map(_ => _?.type.name).join(`, `)}` : ``}
{
    ${this.fields.join(`\n    `)}
    ${this.methods.join(`\n    `)}
}`;
        }
        /** Executes a callback for every defined class. */
        static enumerate(block) {
            const callback = new NativeCallback(_ => block(new Il2Cpp.Class(_)), "void", ["pointer", "pointer"]);
            return Il2Cpp.api.classForEach(callback, NULL);
        }
    };
    __decorate([
        lazy
    ], Class.prototype, "arrayClass", null);
    __decorate([
        lazy
    ], Class.prototype, "arrayElementSize", null);
    __decorate([
        lazy
    ], Class.prototype, "assemblyName", null);
    __decorate([
        lazy
    ], Class.prototype, "declaringClass", null);
    __decorate([
        lazy
    ], Class.prototype, "baseType", null);
    __decorate([
        lazy
    ], Class.prototype, "elementClass", null);
    __decorate([
        lazy
    ], Class.prototype, "fields", null);
    __decorate([
        lazy
    ], Class.prototype, "flags", null);
    __decorate([
        lazy
    ], Class.prototype, "fullName", null);
    __decorate([
        lazy
    ], Class.prototype, "generics", null);
    __decorate([
        lazy
    ], Class.prototype, "hasReferences", null);
    __decorate([
        lazy
    ], Class.prototype, "hasStaticConstructor", null);
    __decorate([
        lazy
    ], Class.prototype, "image", null);
    __decorate([
        lazy
    ], Class.prototype, "instanceSize", null);
    __decorate([
        lazy
    ], Class.prototype, "isAbstract", null);
    __decorate([
        lazy
    ], Class.prototype, "isBlittable", null);
    __decorate([
        lazy
    ], Class.prototype, "isEnum", null);
    __decorate([
        lazy
    ], Class.prototype, "isGeneric", null);
    __decorate([
        lazy
    ], Class.prototype, "isInflated", null);
    __decorate([
        lazy
    ], Class.prototype, "isInterface", null);
    __decorate([
        lazy
    ], Class.prototype, "isValueType", null);
    __decorate([
        lazy
    ], Class.prototype, "interfaces", null);
    __decorate([
        lazy
    ], Class.prototype, "methods", null);
    __decorate([
        lazy
    ], Class.prototype, "name", null);
    __decorate([
        lazy
    ], Class.prototype, "namespace", null);
    __decorate([
        lazy
    ], Class.prototype, "nestedClasses", null);
    __decorate([
        lazy
    ], Class.prototype, "parent", null);
    __decorate([
        lazy
    ], Class.prototype, "rank", null);
    __decorate([
        lazy
    ], Class.prototype, "staticFieldsData", null);
    __decorate([
        lazy
    ], Class.prototype, "valueTypeSize", null);
    __decorate([
        lazy
    ], Class.prototype, "type", null);
    Class = __decorate([
        recycle
    ], Class);
    Il2Cpp.Class = Class;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    /** Creates a delegate object of the given delegate class. */
    function delegate(klass, block) {
        const SystemDelegate = Il2Cpp.corlib.class("System.Delegate");
        const SystemMulticastDelegate = Il2Cpp.corlib.class("System.MulticastDelegate");
        if (!SystemDelegate.isAssignableFrom(klass)) {
            raise(`cannot create a delegate for ${klass.type.name} as it's a non-delegate class`);
        }
        if (klass.equals(SystemDelegate) || klass.equals(SystemMulticastDelegate)) {
            raise(`cannot create a delegate for neither ${SystemDelegate.type.name} nor ${SystemMulticastDelegate.type.name}, use a subclass instead`);
        }
        const delegate = klass.alloc();
        const key = delegate.handle.toString();
        const Invoke = delegate.tryMethod("Invoke") ?? raise(`cannot create a delegate for ${klass.type.name}, there is no Invoke method`);
        delegate.method(".ctor").invoke(delegate, Invoke.handle);
        const callback = Invoke.wrap(block);
        delegate.field("method_ptr").value = callback;
        delegate.field("invoke_impl").value = callback;
        Il2Cpp._callbacksToKeepAlive[key] = callback;
        return delegate;
    }
    Il2Cpp.delegate = delegate;
    /** @internal Used to prevent eager garbage collection against NativeCallbacks. */
    Il2Cpp._callbacksToKeepAlive = {};
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    let Domain = class Domain extends NativeStruct {
        /** Gets the assemblies that have been loaded into the execution context of the application domain. */
        get assemblies() {
            let handles = readNativeList(_ => Il2Cpp.api.domainGetAssemblies(this, _));
            if (handles.length == 0) {
                const assemblyObjects = this.object.method("GetAssemblies").overload().invoke();
                handles = globalThis.Array.from(assemblyObjects).map(_ => _.field("_mono_assembly").value);
            }
            return handles.map(_ => new Il2Cpp.Assembly(_));
        }
        /** Gets the encompassing object of the application domain. */
        get object() {
            return Il2Cpp.corlib.class("System.AppDomain").method("get_CurrentDomain").invoke();
        }
        /** Opens and loads the assembly with the given name. */
        assembly(name) {
            return this.tryAssembly(name) ?? raise(`couldn't find assembly ${name}`);
        }
        /** Attached a new thread to the application domain. */
        attach() {
            return new Il2Cpp.Thread(Il2Cpp.api.threadAttach(this));
        }
        /** Opens and loads the assembly with the given name. */
        tryAssembly(name) {
            return new Il2Cpp.Assembly(Il2Cpp.api.domainGetAssemblyFromName(this, Memory.allocUtf8String(name))).asNullable();
        }
    };
    __decorate([
        lazy
    ], Domain.prototype, "assemblies", null);
    __decorate([
        lazy
    ], Domain.prototype, "object", null);
    Domain = __decorate([
        recycle
    ], Domain);
    Il2Cpp.Domain = Domain;
    // prettier-ignore
    getter(Il2Cpp, "domain", () => {
        return new Il2Cpp.Domain(Il2Cpp.api.domainGet());
    }, lazy);
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Field extends NativeStruct {
        /** Gets the class in which this field is defined. */
        get class() {
            return new Il2Cpp.Class(Il2Cpp.api.fieldGetClass(this));
        }
        /** Gets the flags of the current field. */
        get flags() {
            return Il2Cpp.api.fieldGetFlags(this);
        }
        /** Determines whether this field value is known at compile time. */
        get isLiteral() {
            return (this.flags & 64 /* Il2Cpp.Field.Attributes.Literal */) != 0;
        }
        /** Determines whether this field is static. */
        get isStatic() {
            return (this.flags & 16 /* Il2Cpp.Field.Attributes.Static */) != 0;
        }
        /** Determines whether this field is thread static. */
        get isThreadStatic() {
            const offset = Il2Cpp.corlib.class("System.AppDomain").field("type_resolve_in_progress").offset;
            // prettier-ignore
            getter(Il2Cpp.Field.prototype, "isThreadStatic", function () {
                return this.offset == offset;
            }, lazy);
            return this.isThreadStatic;
        }
        /** Gets the access modifier of this field. */
        get modifier() {
            switch (this.flags & 7 /* Il2Cpp.Field.Attributes.FieldAccessMask */) {
                case 1 /* Il2Cpp.Field.Attributes.Private */:
                    return "private";
                case 2 /* Il2Cpp.Field.Attributes.FamilyAndAssembly */:
                    return "private protected";
                case 3 /* Il2Cpp.Field.Attributes.Assembly */:
                    return "internal";
                case 4 /* Il2Cpp.Field.Attributes.Family */:
                    return "protected";
                case 5 /* Il2Cpp.Field.Attributes.FamilyOrAssembly */:
                    return "protected internal";
                case 6 /* Il2Cpp.Field.Attributes.Public */:
                    return "public";
            }
        }
        /** Gets the name of this field. */
        get name() {
            return Il2Cpp.api.fieldGetName(this).readUtf8String();
        }
        /** Gets the offset of this field, calculated as the difference with its owner virtual address. */
        get offset() {
            return Il2Cpp.api.fieldGetOffset(this);
        }
        /** Gets the type of this field. */
        get type() {
            return new Il2Cpp.Type(Il2Cpp.api.fieldGetType(this));
        }
        /** Gets the value of this field. */
        get value() {
            if (!this.isStatic) {
                raise(`cannot access instance field ${this.class.type.name}::${this.name} from a class, use an object instead`);
            }
            const handle = Memory.alloc(Process.pointerSize);
            Il2Cpp.api.fieldGetStaticValue(this.handle, handle);
            return Il2Cpp.read(handle, this.type);
        }
        /** Sets the value of this field. Thread static or literal values cannot be altered yet. */
        set value(value) {
            if (!this.isStatic) {
                raise(`cannot access instance field ${this.class.type.name}::${this.name} from a class, use an object instead`);
            }
            if (this.isThreadStatic || this.isLiteral) {
                raise(`cannot write the value of field ${this.name} as it's thread static or literal`);
            }
            const handle = Memory.alloc(Process.pointerSize);
            Il2Cpp.write(handle, value, this.type);
            Il2Cpp.api.fieldSetStaticValue(this.handle, handle);
        }
        /** */
        toString() {
            return `\
${this.isThreadStatic ? `[ThreadStatic] ` : ``}\
${this.isStatic ? `static ` : ``}\
${this.type.name} \
${this.name}\
${this.isLiteral ? ` = ${this.type.class.isEnum ? Il2Cpp.read(this.value.handle, this.type.class.baseType) : this.value}` : ``};\
${this.isThreadStatic || this.isLiteral ? `` : ` // 0x${this.offset.toString(16)}`}`;
        }
        /** @internal */
        withHolder(instance) {
            if (this.isStatic) {
                raise(`cannot access static field ${this.class.type.name}::${this.name} from an object, use a class instead`);
            }
            let valueHandle = instance.handle.add(this.offset);
            if (instance instanceof Il2Cpp.ValueType) {
                valueHandle = valueHandle.sub(Il2Cpp.Object.headerSize);
            }
            return new Proxy(this, {
                get(target, property) {
                    if (property == "value") {
                        return Il2Cpp.read(valueHandle, target.type);
                    }
                    return Reflect.get(target, property);
                },
                set(target, property, value) {
                    if (property == "value") {
                        Il2Cpp.write(valueHandle, value, target.type);
                        return true;
                    }
                    return Reflect.set(target, property, value);
                }
            });
        }
    }
    __decorate([
        lazy
    ], Field.prototype, "class", null);
    __decorate([
        lazy
    ], Field.prototype, "flags", null);
    __decorate([
        lazy
    ], Field.prototype, "isLiteral", null);
    __decorate([
        lazy
    ], Field.prototype, "isStatic", null);
    __decorate([
        lazy
    ], Field.prototype, "isThreadStatic", null);
    __decorate([
        lazy
    ], Field.prototype, "modifier", null);
    __decorate([
        lazy
    ], Field.prototype, "name", null);
    __decorate([
        lazy
    ], Field.prototype, "offset", null);
    __decorate([
        lazy
    ], Field.prototype, "type", null);
    Il2Cpp.Field = Field;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class GCHandle {
        handle;
        /** @internal */
        constructor(handle) {
            this.handle = handle;
        }
        /** Gets the object associated to this handle. */
        get target() {
            return new Il2Cpp.Object(Il2Cpp.api.gcHandleGetTarget(this.handle)).asNullable();
        }
        /** Frees this handle. */
        free() {
            return Il2Cpp.api.gcHandleFree(this.handle);
        }
    }
    Il2Cpp.GCHandle = GCHandle;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    let Image = class Image extends NativeStruct {
        /** Gets the assembly in which the current image is defined. */
        get assembly() {
            return new Il2Cpp.Assembly(Il2Cpp.api.imageGetAssembly(this));
        }
        /** Gets the amount of classes defined in this image. */
        get classCount() {
            return Il2Cpp.api.imageGetClassCount(this);
        }
        /** Gets the classes defined in this image. */
        get classes() {
            if (Il2Cpp.unityVersionIsBelow201830) {
                const types = this.assembly.object.method("GetTypes").invoke(false);
                // In Unity 5.3.8f1, getting System.Reflection.Emit.OpCodes type name
                // without iterating all the classes first somehow blows things up at
                // app startup, hence the `Array.from`.
                return globalThis.Array.from(types).map(_ => new Il2Cpp.Class(Il2Cpp.api.classFromObject(_)));
            }
            else {
                return globalThis.Array.from(globalThis.Array(this.classCount), (_, i) => new Il2Cpp.Class(Il2Cpp.api.imageGetClass(this, i)));
            }
        }
        /** Gets the name of this image. */
        get name() {
            return Il2Cpp.api.imageGetName(this).readUtf8String();
        }
        /** Gets the class with the specified name defined in this image. */
        class(name) {
            return this.tryClass(name) ?? raise(`couldn't find class ${name} in assembly ${this.name}`);
        }
        /** Gets the class with the specified name defined in this image. */
        tryClass(name) {
            const dotIndex = name.lastIndexOf(".");
            const classNamespace = Memory.allocUtf8String(dotIndex == -1 ? "" : name.slice(0, dotIndex));
            const className = Memory.allocUtf8String(name.slice(dotIndex + 1));
            return new Il2Cpp.Class(Il2Cpp.api.classFromName(this, classNamespace, className)).asNullable();
        }
    };
    __decorate([
        lazy
    ], Image.prototype, "assembly", null);
    __decorate([
        lazy
    ], Image.prototype, "classCount", null);
    __decorate([
        lazy
    ], Image.prototype, "classes", null);
    __decorate([
        lazy
    ], Image.prototype, "name", null);
    Image = __decorate([
        recycle
    ], Image);
    Il2Cpp.Image = Image;
    // prettier-ignore
    getter(Il2Cpp, "corlib", () => {
        return new Il2Cpp.Image(Il2Cpp.api.getCorlib());
    }, lazy);
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class MemorySnapshot extends NativeStruct {
        /** Captures a memory snapshot. */
        static capture() {
            return new Il2Cpp.MemorySnapshot();
        }
        /** Creates a memory snapshot with the given handle. */
        constructor(handle = Il2Cpp.api.memorySnapshotCapture()) {
            super(handle);
        }
        /** Gets any initialized class. */
        get classes() {
            return readNativeIterator(_ => Il2Cpp.api.memorySnapshotGetClasses(this, _)).map(_ => new Il2Cpp.Class(_));
        }
        /** Gets the objects tracked by this memory snapshot. */
        get objects() {
            // prettier-ignore
            return readNativeList(_ => Il2Cpp.api.memorySnapshotGetObjects(this, _)).filter(_ => !_.isNull()).map(_ => new Il2Cpp.Object(_));
        }
        /** Frees this memory snapshot. */
        free() {
            Il2Cpp.api.memorySnapshotFree(this);
        }
    }
    __decorate([
        lazy
    ], MemorySnapshot.prototype, "classes", null);
    __decorate([
        lazy
    ], MemorySnapshot.prototype, "objects", null);
    Il2Cpp.MemorySnapshot = MemorySnapshot;
    /** */
    function memorySnapshot(block) {
        const memorySnapshot = Il2Cpp.MemorySnapshot.capture();
        const result = block(memorySnapshot);
        memorySnapshot.free();
        return result;
    }
    Il2Cpp.memorySnapshot = memorySnapshot;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Method extends NativeStruct {
        /** Gets the class in which this method is defined. */
        get class() {
            return new Il2Cpp.Class(Il2Cpp.api.methodGetClass(this));
        }
        /** Gets the flags of the current method. */
        get flags() {
            return Il2Cpp.api.methodGetFlags(this, NULL);
        }
        /** Gets the implementation flags of the current method. */
        get implementationFlags() {
            const implementationFlagsPointer = Memory.alloc(Process.pointerSize);
            Il2Cpp.api.methodGetFlags(this, implementationFlagsPointer);
            return implementationFlagsPointer.readU32();
        }
        /** */
        get fridaSignature() {
            const types = [];
            for (const parameter of this.parameters) {
                types.push(parameter.type.fridaAlias);
            }
            if (!this.isStatic || Il2Cpp.unityVersionIsBelow201830) {
                types.unshift("pointer");
            }
            if (this.isInflated) {
                types.push("pointer");
            }
            return types;
        }
        /** Gets the generic parameters of this generic method. */
        get generics() {
            if (!this.isGeneric && !this.isInflated) {
                return [];
            }
            const types = this.object.method("GetGenericArguments").invoke();
            return globalThis.Array.from(types).map(_ => new Il2Cpp.Class(Il2Cpp.api.classFromObject(_)));
        }
        /** Determines whether this method is external. */
        get isExternal() {
            return (this.implementationFlags & 4096 /* Il2Cpp.Method.ImplementationAttribute.InternalCall */) != 0;
        }
        /** Determines whether this method is generic. */
        get isGeneric() {
            return !!Il2Cpp.api.methodIsGeneric(this);
        }
        /** Determines whether this method is inflated (generic with a concrete type parameter). */
        get isInflated() {
            return !!Il2Cpp.api.methodIsInflated(this);
        }
        /** Determines whether this method is static. */
        get isStatic() {
            return !Il2Cpp.api.methodIsInstance(this);
        }
        /** Determines whether this method is synchronized. */
        get isSynchronized() {
            return (this.implementationFlags & 32 /* Il2Cpp.Method.ImplementationAttribute.Synchronized */) != 0;
        }
        /** Gets the access modifier of this method. */
        get modifier() {
            switch (this.flags & 7 /* Il2Cpp.Method.Attributes.MemberAccessMask */) {
                case 1 /* Il2Cpp.Method.Attributes.Private */:
                    return "private";
                case 2 /* Il2Cpp.Method.Attributes.FamilyAndAssembly */:
                    return "private protected";
                case 3 /* Il2Cpp.Method.Attributes.Assembly */:
                    return "internal";
                case 4 /* Il2Cpp.Method.Attributes.Family */:
                    return "protected";
                case 5 /* Il2Cpp.Method.Attributes.FamilyOrAssembly */:
                    return "protected internal";
                case 6 /* Il2Cpp.Method.Attributes.Public */:
                    return "public";
            }
        }
        /** Gets the name of this method. */
        get name() {
            return Il2Cpp.api.methodGetName(this).readUtf8String();
        }
        /** @internal */
        get nativeFunction() {
            return new NativeFunction(this.virtualAddress, this.returnType.fridaAlias, this.fridaSignature);
        }
        /** Gets the encompassing object of the current method. */
        get object() {
            return new Il2Cpp.Object(Il2Cpp.api.methodGetObject(this, NULL));
        }
        /** Gets the amount of parameters of this method. */
        get parameterCount() {
            return Il2Cpp.api.methodGetParameterCount(this);
        }
        /** Gets the parameters of this method. */
        get parameters() {
            return globalThis.Array.from(globalThis.Array(this.parameterCount), (_, i) => {
                const parameterName = Il2Cpp.api.methodGetParameterName(this, i).readUtf8String();
                const parameterType = Il2Cpp.api.methodGetParameterType(this, i);
                return new Il2Cpp.Parameter(parameterName, i, new Il2Cpp.Type(parameterType));
            });
        }
        /** Gets the relative virtual address (RVA) of this method. */
        get relativeVirtualAddress() {
            return this.virtualAddress.sub(Il2Cpp.module.base);
        }
        /** Gets the return type of this method. */
        get returnType() {
            return new Il2Cpp.Type(Il2Cpp.api.methodGetReturnType(this));
        }
        /** Gets the virtual address (VA) to this method. */
        get virtualAddress() {
            const FilterTypeName = Il2Cpp.corlib.class("System.Reflection.Module").initialize().field("FilterTypeName").value;
            const FilterTypeNameMethodPointer = FilterTypeName.field("method_ptr").value;
            const FilterTypeNameMethod = FilterTypeName.field("method").value;
            // prettier-ignore
            const offset = FilterTypeNameMethod.offsetOf(_ => _.readPointer().equals(FilterTypeNameMethodPointer))
                ?? raise("couldn't find the virtual address offset in the native method struct");
            // prettier-ignore
            getter(Il2Cpp.Method.prototype, "virtualAddress", function () {
                return this.handle.add(offset).readPointer();
            }, lazy);
            // In Unity 2017.4.40f1 (don't know about others), Il2Cpp.Class::initialize
            // somehow triggers a nasty bug during early instrumentation, so that we aren't
            // able to obtain the offset to get the virtual address of a method when the script
            // is reloaded.
            // A workaround consists in manually re-invoking the static constructor.
            Il2Cpp.corlib.class("System.Reflection.Module").method(".cctor").invoke();
            return this.virtualAddress;
        }
        /** Replaces the body of this method. */
        set implementation(block) {
            try {
                Interceptor.replace(this.virtualAddress, this.wrap(block));
            }
            catch (e) {
                switch (e.message) {
                    case "access violation accessing 0x0":
                        raise(`couldn't set implementation for method ${this.name} as it has a NULL virtual address`);
                    case /unable to intercept function at \w+; please file a bug/.exec(e.message)?.input:
                        warn(`couldn't set implementation for method ${this.name} as it may be a thunk`);
                        break;
                    case "already replaced this function":
                        warn(`couldn't set implementation for method ${this.name} as it has already been replaced by a thunk`);
                        break;
                    default:
                        throw e;
                }
            }
        }
        /** Creates a generic instance of the current generic method. */
        inflate(...classes) {
            if (!this.isGeneric) {
                raise(`cannot inflate method ${this.name} as it has no generic parameters`);
            }
            if (this.generics.length != classes.length) {
                raise(`cannot inflate method ${this.name} as it needs ${this.generics.length} generic parameter(s), not ${classes.length}`);
            }
            const types = classes.map(_ => _.type.object);
            const typeArray = Il2Cpp.array(Il2Cpp.corlib.class("System.Type"), types);
            const inflatedMethodObject = this.object.method("MakeGenericMethod", 1).invoke(typeArray);
            return new Il2Cpp.Method(inflatedMethodObject.field("mhandle").value);
        }
        /** Invokes this method. */
        invoke(...parameters) {
            if (!this.isStatic) {
                raise(`cannot invoke non-static method ${this.name} as it must be invoked throught a Il2Cpp.Object, not a Il2Cpp.Class`);
            }
            return this.invokeRaw(NULL, ...parameters);
        }
        /** @internal */
        invokeRaw(instance, ...parameters) {
            const allocatedParameters = parameters.map(Il2Cpp.toFridaValue);
            if (!this.isStatic || Il2Cpp.unityVersionIsBelow201830) {
                allocatedParameters.unshift(instance);
            }
            if (this.isInflated) {
                allocatedParameters.push(this.handle);
            }
            try {
                const returnValue = this.nativeFunction(...allocatedParameters);
                return Il2Cpp.fromFridaValue(returnValue, this.returnType);
            }
            catch (e) {
                if (e == null) {
                    raise("an unexpected native invocation exception occurred, this is due to parameter types mismatch");
                }
                switch (e.message) {
                    case "bad argument count":
                        raise(`couldn't invoke method ${this.name} as it needs ${this.parameterCount} parameter(s), not ${parameters.length}`);
                    case "expected a pointer":
                    case "expected number":
                    case "expected array with fields":
                        raise(`couldn't invoke method ${this.name} using incorrect parameter types`);
                }
                throw e;
            }
        }
        /** Gets the overloaded method with the given parameter types. */
        overload(...parameterTypes) {
            const result = this.tryOverload(...parameterTypes);
            if (result != undefined)
                return result;
            raise(`couldn't find overloaded method ${this.name}(${parameterTypes})`);
        }
        /** Gets the parameter with the given name. */
        parameter(name) {
            return this.tryParameter(name) ?? raise(`couldn't find parameter ${name} in method ${this.name}`);
        }
        /** Restore the original method implementation. */
        revert() {
            Interceptor.revert(this.virtualAddress);
            Interceptor.flush();
        }
        /** Gets the overloaded method with the given parameter types. */
        tryOverload(...parameterTypes) {
            return this.class.methods.find(method => {
                return (method.name == this.name &&
                    method.parameterCount == parameterTypes.length &&
                    method.parameters.every((e, i) => e.type.name == parameterTypes[i]));
            });
        }
        /** Gets the parameter with the given name. */
        tryParameter(name) {
            return this.parameters.find(_ => _.name == name);
        }
        /** */
        toString() {
            return `\
${this.isStatic ? `static ` : ``}\
${this.returnType.name} \
${this.name}\
(${this.parameters.join(`, `)});\
${this.virtualAddress.isNull() ? `` : ` // 0x${this.relativeVirtualAddress.toString(16).padStart(8, `0`)}`}`;
        }
        /** @internal */
        withHolder(instance) {
            if (this.isStatic) {
                raise(`cannot access static method ${this.class.type.name}::${this.name} from an object, use a class instead`);
            }
            return new Proxy(this, {
                get(target, property) {
                    switch (property) {
                        case "invoke":
                            return target.invokeRaw.bind(target, instance.handle);
                        case "inflate":
                        case "overload":
                        case "tryOverload":
                            return function (...args) {
                                return target[property](...args)?.withHolder(instance);
                            };
                    }
                    return Reflect.get(target, property);
                }
            });
        }
        /** @internal */
        wrap(block) {
            const startIndex = +!this.isStatic | +Il2Cpp.unityVersionIsBelow201830;
            // prettier-ignore
            return new NativeCallback((...args) => {
                const thisObject = this.isStatic ? this.class : new Il2Cpp.Object(args[0]);
                const parameters = this.parameters.map((e, i) => Il2Cpp.fromFridaValue(args[i + startIndex], e.type));
                const result = block.call(thisObject, ...parameters);
                return Il2Cpp.toFridaValue(result);
            }, this.returnType.fridaAlias, this.fridaSignature);
        }
    }
    __decorate([
        lazy
    ], Method.prototype, "class", null);
    __decorate([
        lazy
    ], Method.prototype, "flags", null);
    __decorate([
        lazy
    ], Method.prototype, "implementationFlags", null);
    __decorate([
        lazy
    ], Method.prototype, "fridaSignature", null);
    __decorate([
        lazy
    ], Method.prototype, "generics", null);
    __decorate([
        lazy
    ], Method.prototype, "isExternal", null);
    __decorate([
        lazy
    ], Method.prototype, "isGeneric", null);
    __decorate([
        lazy
    ], Method.prototype, "isInflated", null);
    __decorate([
        lazy
    ], Method.prototype, "isStatic", null);
    __decorate([
        lazy
    ], Method.prototype, "isSynchronized", null);
    __decorate([
        lazy
    ], Method.prototype, "modifier", null);
    __decorate([
        lazy
    ], Method.prototype, "name", null);
    __decorate([
        lazy
    ], Method.prototype, "nativeFunction", null);
    __decorate([
        lazy
    ], Method.prototype, "object", null);
    __decorate([
        lazy
    ], Method.prototype, "parameterCount", null);
    __decorate([
        lazy
    ], Method.prototype, "parameters", null);
    __decorate([
        lazy
    ], Method.prototype, "relativeVirtualAddress", null);
    __decorate([
        lazy
    ], Method.prototype, "returnType", null);
    Il2Cpp.Method = Method;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Object extends NativeStruct {
        /** Gets the Il2CppObject struct size, possibly equal to `Process.pointerSize * 2`. */
        static get headerSize() {
            return Il2Cpp.corlib.class("System.Object").instanceSize;
        }
        /** Gets the class of this object. */
        get class() {
            return new Il2Cpp.Class(Il2Cpp.api.objectGetClass(this));
        }
        /** Gets the size of the current object. */
        get size() {
            return Il2Cpp.api.objectGetSize(this);
        }
        /** Acquires an exclusive lock on the current object. */
        enter() {
            return Il2Cpp.api.monitorEnter(this);
        }
        /** Release an exclusive lock on the current object. */
        exit() {
            return Il2Cpp.api.monitorExit(this);
        }
        /** Gets the field with the given name. */
        field(name) {
            return this.class.field(name).withHolder(this);
        }
        /** Gets the method with the given name. */
        method(name, parameterCount = -1) {
            return this.class.method(name, parameterCount).withHolder(this);
        }
        /** Notifies a thread in the waiting queue of a change in the locked object's state. */
        pulse() {
            return Il2Cpp.api.monitorPulse(this);
        }
        /** Notifies all waiting threads of a change in the object's state. */
        pulseAll() {
            return Il2Cpp.api.monitorPulseAll(this);
        }
        /** Creates a reference to this object. */
        ref(pin) {
            return new Il2Cpp.GCHandle(Il2Cpp.api.gcHandleNew(this, +pin));
        }
        /** Gets the correct virtual method from the given virtual method. */
        virtualMethod(method) {
            return new Il2Cpp.Method(Il2Cpp.api.objectGetVirtualMethod(this, method)).withHolder(this);
        }
        /** Attempts to acquire an exclusive lock on the current object. */
        tryEnter(timeout) {
            return !!Il2Cpp.api.monitorTryEnter(this, timeout);
        }
        /** Gets the field with the given name. */
        tryField(name) {
            return this.class.tryField(name)?.withHolder(this);
        }
        /** Gets the field with the given name. */
        tryMethod(name, parameterCount = -1) {
            return this.class.tryMethod(name, parameterCount)?.withHolder(this);
        }
        /** Releases the lock on an object and attempts to block the current thread until it reacquires the lock. */
        tryWait(timeout) {
            return !!Il2Cpp.api.monitorTryWait(this, timeout);
        }
        /** */
        toString() {
            return this.isNull() ? "null" : this.method("ToString").invoke().content ?? "null";
        }
        /** Unboxes the value type out of this object. */
        unbox() {
            return new Il2Cpp.ValueType(Il2Cpp.api.objectUnbox(this), this.class.type);
        }
        /** Releases the lock on an object and blocks the current thread until it reacquires the lock. */
        wait() {
            return Il2Cpp.api.monitorWait(this);
        }
        /** Creates a weak reference to this object. */
        weakRef(trackResurrection) {
            return new Il2Cpp.GCHandle(Il2Cpp.api.gcHandleNewWeakRef(this, +trackResurrection));
        }
    }
    __decorate([
        lazy
    ], Object.prototype, "class", null);
    __decorate([
        lazy
    ], Object.prototype, "size", null);
    __decorate([
        lazy
    ], Object, "headerSize", null);
    Il2Cpp.Object = Object;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Parameter {
        /** Name of this parameter. */
        name;
        /** Position of this parameter. */
        position;
        /** Type of this parameter. */
        type;
        constructor(name, position, type) {
            this.name = name;
            this.position = position;
            this.type = type;
        }
        /** */
        toString() {
            return `${this.type.name} ${this.name}`;
        }
    }
    Il2Cpp.Parameter = Parameter;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Pointer extends NativeStruct {
        type;
        constructor(handle, type) {
            super(handle);
            this.type = type;
        }
        /** Gets the element at the given index. */
        get(index) {
            return Il2Cpp.read(this.handle.add(index * this.type.class.arrayElementSize), this.type);
        }
        /** Reads the given amount of elements starting at the given offset. */
        read(length, offset = 0) {
            const values = new globalThis.Array(length);
            for (let i = 0; i < length; i++) {
                values[i] = this.get(i + offset);
            }
            return values;
        }
        /** Sets the given element at the given index */
        set(index, value) {
            Il2Cpp.write(this.handle.add(index * this.type.class.arrayElementSize), value, this.type);
        }
        /** */
        toString() {
            return this.handle.toString();
        }
        /** Writes the given elements starting at the given index. */
        write(values, offset = 0) {
            for (let i = 0; i < values.length; i++) {
                this.set(i + offset, values[i]);
            }
        }
    }
    Il2Cpp.Pointer = Pointer;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Reference extends NativeStruct {
        type;
        constructor(handle, type) {
            super(handle);
            this.type = type;
        }
        /** Gets the element referenced by the current reference. */
        get value() {
            return Il2Cpp.read(this.handle, this.type);
        }
        /** Sets the element referenced by the current reference. */
        set value(value) {
            Il2Cpp.write(this.handle, value, this.type);
        }
        /** */
        toString() {
            return this.isNull() ? "null" : `->${this.value}`;
        }
    }
    Il2Cpp.Reference = Reference;
    /** Creates a reference to the specified value. */
    function reference(value, type) {
        const handle = Memory.alloc(Process.pointerSize);
        switch (typeof value) {
            case "boolean":
                return new Il2Cpp.Reference(handle.writeS8(+value), Il2Cpp.corlib.class("System.Boolean").type);
            case "number":
                switch (type?.typeEnum) {
                    case Il2Cpp.Type.enum.unsignedByte:
                        return new Il2Cpp.Reference(handle.writeU8(value), type);
                    case Il2Cpp.Type.enum.byte:
                        return new Il2Cpp.Reference(handle.writeS8(value), type);
                    case Il2Cpp.Type.enum.char:
                    case Il2Cpp.Type.enum.unsignedShort:
                        return new Il2Cpp.Reference(handle.writeU16(value), type);
                    case Il2Cpp.Type.enum.short:
                        return new Il2Cpp.Reference(handle.writeS16(value), type);
                    case Il2Cpp.Type.enum.unsignedInt:
                        return new Il2Cpp.Reference(handle.writeU32(value), type);
                    case Il2Cpp.Type.enum.int:
                        return new Il2Cpp.Reference(handle.writeS32(value), type);
                    case Il2Cpp.Type.enum.unsignedLong:
                        return new Il2Cpp.Reference(handle.writeU64(value), type);
                    case Il2Cpp.Type.enum.long:
                        return new Il2Cpp.Reference(handle.writeS64(value), type);
                    case Il2Cpp.Type.enum.float:
                        return new Il2Cpp.Reference(handle.writeFloat(value), type);
                    case Il2Cpp.Type.enum.double:
                        return new Il2Cpp.Reference(handle.writeDouble(value), type);
                }
            case "object":
                if (value instanceof Il2Cpp.ValueType || value instanceof Il2Cpp.Pointer) {
                    return new Il2Cpp.Reference(handle.writePointer(value), value.type);
                }
                else if (value instanceof Il2Cpp.Object) {
                    return new Il2Cpp.Reference(handle.writePointer(value), value.class.type);
                }
                else if (value instanceof Il2Cpp.String || value instanceof Il2Cpp.Array) {
                    return new Il2Cpp.Reference(handle.writePointer(value), value.object.class.type);
                }
                else if (value instanceof NativePointer) {
                    switch (type?.typeEnum) {
                        case Il2Cpp.Type.enum.unsignedNativePointer:
                        case Il2Cpp.Type.enum.nativePointer:
                            return new Il2Cpp.Reference(handle.writePointer(value), type);
                    }
                }
                else if (value instanceof Int64) {
                    return new Il2Cpp.Reference(handle.writeS64(value), Il2Cpp.corlib.class("System.Int64").type);
                }
                else if (value instanceof UInt64) {
                    return new Il2Cpp.Reference(handle.writeU64(value), Il2Cpp.corlib.class("System.UInt64").type);
                }
            default:
                raise(`couldn't create a reference to ${value} using an unhandled type ${type?.name}`);
        }
    }
    Il2Cpp.reference = reference;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class String extends NativeStruct {
        /** Gets the content of this string. */
        get content() {
            return Il2Cpp.api.stringGetChars(this).readUtf16String(this.length);
        }
        /** Sets the content of this string. */
        set content(value) {
            // prettier-ignore
            const offset = Il2Cpp.string("vfsfitvnm").handle.offsetOf(_ => _.readInt() == 32)
                ?? raise("couldn't find the length offset in the native string struct");
            globalThis.Object.defineProperty(Il2Cpp.String.prototype, "content", {
                set(value) {
                    Il2Cpp.api.stringGetChars(this).writeUtf16String(value ?? "");
                    this.handle.add(offset).writeS32(value?.length ?? 0);
                }
            });
            this.content = value;
        }
        /** Gets the length of this string. */
        get length() {
            return Il2Cpp.api.stringGetLength(this);
        }
        /** Gets the encompassing object of the current string. */
        get object() {
            return new Il2Cpp.Object(this);
        }
        /** */
        toString() {
            return this.isNull() ? "null" : `"${this.content}"`;
        }
    }
    Il2Cpp.String = String;
    /** Creates a new string with the specified content. */
    function string(content) {
        return new Il2Cpp.String(Il2Cpp.api.stringNew(Memory.allocUtf8String(content ?? "")));
    }
    Il2Cpp.string = string;
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class Thread extends NativeStruct {
        /** Gets the native id of the current thread. */
        get id() {
            let get = function () {
                return this.internal.field("thread_id").value.toNumber();
            };
            // https://github.com/mono/linux-packaging-mono/blob/d586f84dfea30217f34b076a616a098518aa72cd/mono/utils/mono-threads.h#L642
            if (Process.platform != "windows") {
                const currentThreadId = Process.getCurrentThreadId();
                const currentPosixThread = ptr(get.apply(Il2Cpp.currentThread));
                // prettier-ignore
                const offset = currentPosixThread.offsetOf(_ => _.readS32() == currentThreadId, 1024) ??
                    raise(`couldn't find the offset for determining the kernel id of a posix thread`);
                const _get = get;
                get = function () {
                    return ptr(_get.apply(this)).add(offset).readS32();
                };
            }
            getter(Il2Cpp.Thread.prototype, "id", get, lazy);
            return this.id;
        }
        /** Gets the encompassing internal object (System.Threding.InternalThreead) of the current thread. */
        get internal() {
            return this.object.tryField("internal_thread")?.value ?? this.object;
        }
        /** Determines whether the current thread is the garbage collector finalizer one. */
        get isFinalizer() {
            return !Il2Cpp.api.threadIsVm(this);
        }
        /** Gets the managed id of the current thread. */
        get managedId() {
            return this.object.method("get_ManagedThreadId").invoke();
        }
        /** Gets the encompassing object of the current thread. */
        get object() {
            return new Il2Cpp.Object(this);
        }
        /** @internal */
        get staticData() {
            return this.internal.field("static_data").value;
        }
        /** @internal */
        get synchronizationContext() {
            const get_ExecutionContext = this.object.tryMethod("GetMutableExecutionContext") ?? this.object.method("get_ExecutionContext");
            const executionContext = get_ExecutionContext.invoke();
            let synchronizationContext = executionContext.tryField("_syncContext")?.value ??
                executionContext.tryMethod("get_SynchronizationContext")?.invoke() ??
                this.tryLocalValue(Il2Cpp.corlib.class("System.Threading.SynchronizationContext"));
            if (synchronizationContext == null || synchronizationContext.isNull()) {
                if (this.handle.equals(Il2Cpp.mainThread.handle)) {
                    raise(`couldn't find the synchronization context of the main thread, perhaps this is early instrumentation?`);
                }
                else {
                    raise(`couldn't find the synchronization context of thread #${this.managedId}, only the main thread is expected to have one`);
                }
            }
            return synchronizationContext;
        }
        /** Detaches the thread from the application domain. */
        detach() {
            return Il2Cpp.api.threadDetach(this);
        }
        /** Schedules a callback on the current thread. */
        schedule(block) {
            const Post = this.synchronizationContext.method("Post");
            return new Promise(resolve => {
                const delegate = Il2Cpp.delegate(Il2Cpp.corlib.class("System.Threading.SendOrPostCallback"), () => {
                    const result = block();
                    setImmediate(() => resolve(result));
                });
                // This is to replace pending scheduled callbacks when the script is about to get unlaoded.
                // If we skip this cleanup, Frida's native callbacks will point to invalid memory, making
                // the application crash as soon as the IL2CPP runtime tries to execute such callbacks.
                // For instance, without the following code, this is how you can trigger a crash:
                // 1) unfocus the application;
                // 2) schedule a callback;
                // 3) reload the script;
                // 4) focus application.
                //
                // The "proper" solution consists in removing our delegates from the Unity synchroniztion
                // context, but the interface is not consisent across Unity versions - e.g. 2017.4.40f1 uses
                // a queue instead of a list, whereas newer versions do not allow null work requests.
                // The following solution, which basically redirects the invocation to a native function that
                // survives the script reloading, is much simpler, honestly.
                Script.bindWeak(globalThis, () => {
                    delegate.field("method_ptr").value = delegate.field("invoke_impl").value = Il2Cpp.api.domainGet;
                });
                Post.invoke(delegate, NULL);
            });
        }
        /** @internal */
        tryLocalValue(klass) {
            for (let i = 0; i < 16; i++) {
                const base = this.staticData.add(i * Process.pointerSize).readPointer();
                if (!base.isNull()) {
                    const object = new Il2Cpp.Object(base.readPointer()).asNullable();
                    if (object?.class?.isSubclassOf(klass, false)) {
                        return object;
                    }
                }
            }
        }
    }
    __decorate([
        lazy
    ], Thread.prototype, "internal", null);
    __decorate([
        lazy
    ], Thread.prototype, "isFinalizer", null);
    __decorate([
        lazy
    ], Thread.prototype, "managedId", null);
    __decorate([
        lazy
    ], Thread.prototype, "object", null);
    __decorate([
        lazy
    ], Thread.prototype, "staticData", null);
    __decorate([
        lazy
    ], Thread.prototype, "synchronizationContext", null);
    Il2Cpp.Thread = Thread;
    getter(Il2Cpp, "attachedThreads", () => {
        return readNativeList(Il2Cpp.api.threadGetAttachedThreads).map(_ => new Il2Cpp.Thread(_));
    });
    getter(Il2Cpp, "currentThread", () => {
        return new Il2Cpp.Thread(Il2Cpp.api.threadGetCurrent()).asNullable();
    });
    getter(Il2Cpp, "mainThread", () => {
        // I'm not sure if this is always the case. Typically, the main
        // thread managed id is 1, but this isn't always true: spawning
        // an Android application with Unity 5.3.8f1 will cause the Frida
        // thread to have the managed id equal to 1, whereas the main thread
        // managed id is 2.
        return Il2Cpp.attachedThreads[0];
    });
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    let Type = class Type extends NativeStruct {
        /** */
        static get enum() {
            const _ = (_, block = (_) => _) => block(Il2Cpp.corlib.class(_)).type.typeEnum;
            return {
                void: _("System.Void"),
                boolean: _("System.Boolean"),
                char: _("System.Char"),
                byte: _("System.SByte"),
                unsignedByte: _("System.Byte"),
                short: _("System.Int16"),
                unsignedShort: _("System.UInt16"),
                int: _("System.Int32"),
                unsignedInt: _("System.UInt32"),
                long: _("System.Int64"),
                unsignedLong: _("System.UInt64"),
                nativePointer: _("System.IntPtr"),
                unsignedNativePointer: _("System.UIntPtr"),
                float: _("System.Single"),
                double: _("System.Double"),
                pointer: _("System.IntPtr", _ => _.field("m_value")),
                valueType: _("System.Decimal"),
                object: _("System.Object"),
                string: _("System.String"),
                class: _("System.Array"),
                array: _("System.Void", _ => _.arrayClass),
                multidimensionalArray: _("System.Void", _ => new Il2Cpp.Class(Il2Cpp.api.classGetArrayClass(_, 2))),
                genericInstance: _("System.Int32", _ => _.interfaces.find(_ => _.name.endsWith("`1")))
            };
        }
        /** Gets the class of this type. */
        get class() {
            return new Il2Cpp.Class(Il2Cpp.api.typeGetClass(this));
        }
        /** */
        get fridaAlias() {
            if (this.isByReference) {
                return "pointer";
            }
            switch (this.typeEnum) {
                case Il2Cpp.Type.enum.void:
                    return "void";
                case Il2Cpp.Type.enum.boolean:
                    return "bool";
                case Il2Cpp.Type.enum.char:
                    return "uchar";
                case Il2Cpp.Type.enum.byte:
                    return "int8";
                case Il2Cpp.Type.enum.unsignedByte:
                    return "uint8";
                case Il2Cpp.Type.enum.short:
                    return "int16";
                case Il2Cpp.Type.enum.unsignedShort:
                    return "uint16";
                case Il2Cpp.Type.enum.int:
                    return "int32";
                case Il2Cpp.Type.enum.unsignedInt:
                    return "uint32";
                case Il2Cpp.Type.enum.long:
                    return "int64";
                case Il2Cpp.Type.enum.unsignedLong:
                    return "uint64";
                case Il2Cpp.Type.enum.float:
                    return "float";
                case Il2Cpp.Type.enum.double:
                    return "double";
                case Il2Cpp.Type.enum.valueType:
                    return getValueTypeFields(this);
                case Il2Cpp.Type.enum.nativePointer:
                case Il2Cpp.Type.enum.unsignedNativePointer:
                case Il2Cpp.Type.enum.pointer:
                case Il2Cpp.Type.enum.string:
                case Il2Cpp.Type.enum.array:
                case Il2Cpp.Type.enum.multidimensionalArray:
                    return "pointer";
                case Il2Cpp.Type.enum.class:
                case Il2Cpp.Type.enum.object:
                case Il2Cpp.Type.enum.genericInstance:
                    return this.class.isValueType ? getValueTypeFields(this) : "pointer";
                default:
                    return "pointer";
            }
        }
        /** Determines whether this type is passed by reference. */
        get isByReference() {
            return this.name.endsWith("&");
        }
        /** Determines whether this type is primitive. */
        get isPrimitive() {
            return ((this.typeEnum >= Il2Cpp.Type.enum.boolean && this.typeEnum <= Il2Cpp.Type.enum.double) ||
                this.typeEnum == Il2Cpp.Type.enum.nativePointer ||
                this.typeEnum == Il2Cpp.Type.enum.unsignedNativePointer);
        }
        /** Gets the name of this type. */
        get name() {
            const handle = Il2Cpp.api.typeGetName(this);
            try {
                return handle.readUtf8String();
            }
            finally {
                Il2Cpp.free(handle);
            }
        }
        /** Gets the encompassing object of the current type. */
        get object() {
            return new Il2Cpp.Object(Il2Cpp.api.typeGetObject(this));
        }
        /** Gets the type enum of the current type. */
        get typeEnum() {
            return Il2Cpp.api.typeGetTypeEnum(this);
        }
        /** */
        toString() {
            return this.name;
        }
    };
    __decorate([
        lazy
    ], Type.prototype, "class", null);
    __decorate([
        lazy
    ], Type.prototype, "fridaAlias", null);
    __decorate([
        lazy
    ], Type.prototype, "isByReference", null);
    __decorate([
        lazy
    ], Type.prototype, "isPrimitive", null);
    __decorate([
        lazy
    ], Type.prototype, "name", null);
    __decorate([
        lazy
    ], Type.prototype, "object", null);
    __decorate([
        lazy
    ], Type.prototype, "typeEnum", null);
    __decorate([
        lazy
    ], Type, "enum", null);
    Type = __decorate([
        recycle
    ], Type);
    Il2Cpp.Type = Type;
    function getValueTypeFields(type) {
        const instanceFields = type.class.fields.filter(_ => !_.isStatic);
        return instanceFields.length == 0 ? ["char"] : instanceFields.map(_ => _.type.fridaAlias);
    }
})(Il2Cpp || (Il2Cpp = {}));
var Il2Cpp;
(function (Il2Cpp) {
    class ValueType extends NativeStruct {
        type;
        constructor(handle, type) {
            super(handle);
            this.type = type;
        }
        /** Boxes the current value type in a object. */
        box() {
            return new Il2Cpp.Object(Il2Cpp.api.valueTypeBox(this.type.class, this));
        }
        /** Gets the field with the given name. */
        field(name) {
            return this.type.class.field(name).withHolder(this);
        }
        /** Gets the field with the given name. */
        tryField(name) {
            return this.type.class.tryField(name)?.withHolder(this);
        }
        /** */
        toString() {
            return this.isNull() ? "null" : this.box().toString();
        }
    }
    Il2Cpp.ValueType = ValueType;
})(Il2Cpp || (Il2Cpp = {}));
/// <reference path="./utils/console.ts">/>
/// <reference path="./utils/getter.ts">/>
/// <reference path="./utils/lazy.ts">/>
/// <reference path="./utils/native-struct.ts">/>
/// <reference path="./utils/native-wait.ts">/>
/// <reference path="./utils/offset-of.ts">/>
/// <reference path="./utils/read-native-iterator.ts">/>
/// <reference path="./utils/read-native-list.ts">/>
/// <reference path="./utils/recycle.ts">/>
/// <reference path="./utils/unity-version.ts">/>
/// <reference path="./il2cpp/api.ts">/>
/// <reference path="./il2cpp/application.ts">/>
/// <reference path="./il2cpp/dump.ts">/>
/// <reference path="./il2cpp/exception-listener.ts">/>
/// <reference path="./il2cpp/filters.ts">/>
/// <reference path="./il2cpp/gc.ts">/>
/// <reference path="./il2cpp/memory.ts">/>
/// <reference path="./il2cpp/module.ts">/>
/// <reference path="./il2cpp/perform.ts">/>
/// <reference path="./il2cpp/tracer.ts">/>
/// <reference path="./il2cpp/structs/array.ts">/>
/// <reference path="./il2cpp/structs/assembly.ts">/>
/// <reference path="./il2cpp/structs/class.ts">/>
/// <reference path="./il2cpp/structs/delegate.ts">/>
/// <reference path="./il2cpp/structs/domain.ts">/>
/// <reference path="./il2cpp/structs/field.ts">/>
/// <reference path="./il2cpp/structs/gc-handle.ts">/>
/// <reference path="./il2cpp/structs/image.ts">/>
/// <reference path="./il2cpp/structs/memory-snapshot.ts">/>
/// <reference path="./il2cpp/structs/method.ts">/>
/// <reference path="./il2cpp/structs/object.ts">/>
/// <reference path="./il2cpp/structs/parameter.ts">/>
/// <reference path="./il2cpp/structs/pointer.ts">/>
/// <reference path="./il2cpp/structs/reference.ts">/>
/// <reference path="./il2cpp/structs/string.ts">/>
/// <reference path="./il2cpp/structs/thread.ts">/>
/// <reference path="./il2cpp/structs/type.ts">/>
/// <reference path="./il2cpp/structs/value-type.ts">/>
globalThis.Il2Cpp = Il2Cpp;
/** @internal */
function decorate(target, decorator, descriptors = Object.getOwnPropertyDescriptors(target)) {
    for (const key in descriptors) {
        descriptors[key] = decorator(target, key, descriptors[key]);
    }
    Object.defineProperties(target, descriptors);
    return target;
}